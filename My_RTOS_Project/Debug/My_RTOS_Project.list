
My_RTOS_Project.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001280  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080013b0  080013b0  000113b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013f8  080013f8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080013f8  080013f8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013f8  080013f8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013f8  080013f8  000113f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013fc  080013fc  000113fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000620  20000004  08001404  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  08001404  00020624  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004012  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a5e  00000000  00000000  0002403f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000cf0  00000000  00000000  00024a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000248  00000000  00000000  00025790  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001f0  00000000  00000000  000259d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002629  00000000  00000000  00025bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002615  00000000  00000000  000281f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00010675  00000000  00000000  0002a806  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003ae7b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000734  00000000  00000000  0003aef8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08001398 	.word	0x08001398

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08001398 	.word	0x08001398

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	6039      	str	r1, [r7, #0]
 800018e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000194:	2b00      	cmp	r3, #0
 8000196:	db0a      	blt.n	80001ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	b2da      	uxtb	r2, r3
 800019c:	490c      	ldr	r1, [pc, #48]	; (80001d0 <__NVIC_SetPriority+0x4c>)
 800019e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a2:	0152      	lsls	r2, r2, #5
 80001a4:	b2d2      	uxtb	r2, r2
 80001a6:	440b      	add	r3, r1
 80001a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ac:	e00a      	b.n	80001c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <__NVIC_SetPriority+0x50>)
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	f003 030f 	and.w	r3, r3, #15
 80001ba:	3b04      	subs	r3, #4
 80001bc:	0152      	lsls	r2, r2, #5
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	440b      	add	r3, r1
 80001c2:	761a      	strb	r2, [r3, #24]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000e100 	.word	0xe000e100
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3b01      	subs	r3, #1
 80001e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001e8:	d301      	bcc.n	80001ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001ea:	2301      	movs	r3, #1
 80001ec:	e00f      	b.n	800020e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <SysTick_Config+0x40>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001f6:	2107      	movs	r1, #7
 80001f8:	f04f 30ff 	mov.w	r0, #4294967295
 80001fc:	f7ff ffc2 	bl	8000184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <SysTick_Config+0x40>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <SysTick_Config+0x40>)
 8000208:	2207      	movs	r2, #7
 800020a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	e000e010 	.word	0xe000e010

0800021c <HardFault_Handler>:
#include "Schedular_Private.h"

// Enabling all faults for possible errors (Accessing memories etc.)

void HardFault_Handler()
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	while(1);
 8000220:	e7fe      	b.n	8000220 <HardFault_Handler+0x4>

08000222 <MemManage_Handler>:
}

void MemManage_Handler()
{
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0
	while(1);
 8000226:	e7fe      	b.n	8000226 <MemManage_Handler+0x4>

08000228 <BusFault_Handler>:
}

void BusFault_Handler()
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	while(1);
 800022c:	e7fe      	b.n	800022c <BusFault_Handler+0x4>

0800022e <UsageFault_Handler>:
}

void UsageFault_Handler()
{
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0
	while(1);
 8000232:	e7fe      	b.n	8000232 <UsageFault_Handler+0x4>

08000234 <SVC_Handler>:

// Consider it as C function, but don't push anything in stack, it is assembly, force the compiler to not add anything
__attribute ((naked))  void SVC_Handler()
{
	// Check EXC_Return to see if you were MSP or PSP
	__asm("tst lr,#4 \n\t"
 8000234:	f01e 0f04 	tst.w	lr, #4
 8000238:	bf0c      	ite	eq
 800023a:	f3ef 8008 	mrseq	r0, MSP
 800023e:	f3ef 8009 	mrsne	r0, PSP
 8000242:	f000 b9d9 	b.w	80005f8 <OS_SVC_Services>
			"ITE EQ \n\t"
			"mrseq r0,MSP \n\t"
			"mrsne r0,PSP \n\t"
			"B OS_SVC_Services");
}
 8000246:	bf00      	nop

08000248 <Trigger_OS_PendSV>:


void Trigger_OS_PendSV()
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800024c:	4b04      	ldr	r3, [pc, #16]	; (8000260 <Trigger_OS_PendSV+0x18>)
 800024e:	685b      	ldr	r3, [r3, #4]
 8000250:	4a03      	ldr	r2, [pc, #12]	; (8000260 <Trigger_OS_PendSV+0x18>)
 8000252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000256:	6053      	str	r3, [r2, #4]
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <HW_Init>:



void HW_Init()
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	// X = 8000 counts

	// Decrease priority of pendSV to be less than or equal systick timer
	// systick = 14

	__NVIC_SetPriority(PendSV_IRQn,15);
 8000268:	210f      	movs	r1, #15
 800026a:	f06f 0001 	mvn.w	r0, #1
 800026e:	f7ff ff89 	bl	8000184 <__NVIC_SetPriority>



}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}

08000276 <Start_Ticker>:




void Start_Ticker()
{
 8000276:	b580      	push	{r7, lr}
 8000278:	af00      	add	r7, sp, #0
	// 8 MHz (By default)
	// 1 count = 0.125 us
	// X count -> 1ms
	// X = 8000 counts

	SysTick_Config(8000);
 800027a:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800027e:	f7ff ffab 	bl	80001d8 <SysTick_Config>

}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}
	...

08000288 <SysTick_Handler>:


uint8_t SystTickIndication;

void SysTick_Handler(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	SystTickIndication ^= 1;
 800028c:	4b07      	ldr	r3, [pc, #28]	; (80002ac <SysTick_Handler+0x24>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	f083 0301 	eor.w	r3, r3, #1
 8000294:	b2da      	uxtb	r2, r3
 8000296:	4b05      	ldr	r3, [pc, #20]	; (80002ac <SysTick_Handler+0x24>)
 8000298:	701a      	strb	r2, [r3, #0]
	MYRTOS_Update_Tasks_WaitingTime();
 800029a:	f000 fc01 	bl	8000aa0 <MYRTOS_Update_Tasks_WaitingTime>
	// Decide what Next (To determine Pcurrent, Pnext)
	Decide_WhatNextTask();
 800029e:	f000 f959 	bl	8000554 <Decide_WhatNextTask>
	// Trigger PendSv(Switch Context & Restore)
	Trigger_OS_PendSV();
 80002a2:	f7ff ffd1 	bl	8000248 <Trigger_OS_PendSV>
}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	2000003c 	.word	0x2000003c

080002b0 <FIFO_Init>:
#include "My_RTOS_FIFO.h"



FIFO_Status FIFO_Init(FIFO_Buffer_t *fifo, Element_Type* Buffer, uint32_t length)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	607a      	str	r2, [r7, #4]
	if(!Buffer)
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d101      	bne.n	80002c6 <FIFO_Init+0x16>
		return FIFO_Null;
 80002c2:	2303      	movs	r3, #3
 80002c4:	e011      	b.n	80002ea <FIFO_Init+0x3a>


	fifo->base = Buffer;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	68ba      	ldr	r2, [r7, #8]
 80002ca:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	68da      	ldr	r2, [r3, #12]
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base;
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	68da      	ldr	r2, [r3, #12]
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	611a      	str	r2, [r3, #16]
	fifo->counter = 0;
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]

	return FIFO_No_Error;
 80002e8:	2300      	movs	r3, #0


}
 80002ea:	4618      	mov	r0, r3
 80002ec:	3714      	adds	r7, #20
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr

080002f4 <FIFO_Enqeue>:



FIFO_Status FIFO_Enqeue(FIFO_Buffer_t *fifo, Element_Type Item)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	6039      	str	r1, [r7, #0]
	// Check if the FIFO is valid
	if(!fifo->base || !fifo->length)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	68db      	ldr	r3, [r3, #12]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d003      	beq.n	800030e <FIFO_Enqeue+0x1a>
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	691b      	ldr	r3, [r3, #16]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d101      	bne.n	8000312 <FIFO_Enqeue+0x1e>
		return FIFO_Null;
 800030e:	2303      	movs	r3, #3
 8000310:	e02e      	b.n	8000370 <FIFO_Enqeue+0x7c>

	// Full FIFO
	if((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	685a      	ldr	r2, [r3, #4]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	429a      	cmp	r2, r3
 800031c:	d107      	bne.n	800032e <FIFO_Enqeue+0x3a>
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	691b      	ldr	r3, [r3, #16]
 8000326:	429a      	cmp	r2, r3
 8000328:	d101      	bne.n	800032e <FIFO_Enqeue+0x3a>
		return FIFO_Full;
 800032a:	2301      	movs	r3, #1
 800032c:	e020      	b.n	8000370 <FIFO_Enqeue+0x7c>


	*(fifo->tail) = Item;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	683a      	ldr	r2, [r7, #0]
 8000334:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	1c5a      	adds	r2, r3, #1
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]


	// Handle Circular Queue
	if((uint32_t)fifo->tail == (((uint32_t)fifo->base + (4*fifo->length)) - 4))
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	461a      	mov	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	68db      	ldr	r3, [r3, #12]
 800034a:	4619      	mov	r1, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	691b      	ldr	r3, [r3, #16]
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	440b      	add	r3, r1
 8000354:	3b04      	subs	r3, #4
 8000356:	429a      	cmp	r2, r3
 8000358:	d104      	bne.n	8000364 <FIFO_Enqeue+0x70>
		fifo->tail = fifo->base;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	68da      	ldr	r2, [r3, #12]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	e004      	b.n	800036e <FIFO_Enqeue+0x7a>
	else
		fifo->tail++;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	689b      	ldr	r3, [r3, #8]
 8000368:	1d1a      	adds	r2, r3, #4
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	609a      	str	r2, [r3, #8]

	return FIFO_No_Error;
 800036e:	2300      	movs	r3, #0
}
 8000370:	4618      	mov	r0, r3
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	bc80      	pop	{r7}
 8000378:	4770      	bx	lr

0800037a <FIFO_Deqeue>:




FIFO_Status FIFO_Deqeue(FIFO_Buffer_t *fifo, Element_Type* Item)
{
 800037a:	b480      	push	{r7}
 800037c:	b083      	sub	sp, #12
 800037e:	af00      	add	r7, sp, #0
 8000380:	6078      	str	r0, [r7, #4]
 8000382:	6039      	str	r1, [r7, #0]
	// Check if the FIFO is valid
	if(!fifo->base || !fifo->length)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	68db      	ldr	r3, [r3, #12]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d003      	beq.n	8000394 <FIFO_Deqeue+0x1a>
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	691b      	ldr	r3, [r3, #16]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d101      	bne.n	8000398 <FIFO_Deqeue+0x1e>
		return FIFO_Null;
 8000394:	2303      	movs	r3, #3
 8000396:	e029      	b.n	80003ec <FIFO_Deqeue+0x72>

	// Empty FIFO(Nothing to deqeue)
	if(fifo->head == fifo->tail)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	685a      	ldr	r2, [r3, #4]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	689b      	ldr	r3, [r3, #8]
 80003a0:	429a      	cmp	r2, r3
 80003a2:	d101      	bne.n	80003a8 <FIFO_Deqeue+0x2e>
		return FIFO_Empty;
 80003a4:	2302      	movs	r3, #2
 80003a6:	e021      	b.n	80003ec <FIFO_Deqeue+0x72>

	*Item = *(fifo->head);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	685b      	ldr	r3, [r3, #4]
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	1e5a      	subs	r2, r3, #1
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	601a      	str	r2, [r3, #0]


	// Circular deqeue
	if((uint32_t)(fifo->head) == (((uint32_t)fifo->base + (4*fifo->length)) - 4))
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	461a      	mov	r2, r3
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	68db      	ldr	r3, [r3, #12]
 80003c6:	4619      	mov	r1, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	691b      	ldr	r3, [r3, #16]
 80003cc:	009b      	lsls	r3, r3, #2
 80003ce:	440b      	add	r3, r1
 80003d0:	3b04      	subs	r3, #4
 80003d2:	429a      	cmp	r2, r3
 80003d4:	d104      	bne.n	80003e0 <FIFO_Deqeue+0x66>
		fifo->head = fifo->base;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	68da      	ldr	r2, [r3, #12]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	e004      	b.n	80003ea <FIFO_Deqeue+0x70>
	else
		fifo->head++;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	685b      	ldr	r3, [r3, #4]
 80003e4:	1d1a      	adds	r2, r3, #4
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	605a      	str	r2, [r3, #4]

	return FIFO_No_Error;
 80003ea:	2300      	movs	r3, #0

}
 80003ec:	4618      	mov	r0, r3
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bc80      	pop	{r7}
 80003f4:	4770      	bx	lr
	...

080003f8 <BubbleSort_SchedularTable>:
}SVC_ID;


// (Handler Mode)
void BubbleSort_SchedularTable()
{
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
	unsigned int i ,j ,n;
	Task_Config* TempTask;

	n = OS_Control.ActiveTasksNum;
 80003fe:	4b21      	ldr	r3, [pc, #132]	; (8000484 <BubbleSort_SchedularTable+0x8c>)
 8000400:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000404:	607b      	str	r3, [r7, #4]

	for(i=0 ; i < n - 1 ; i++)
 8000406:	2300      	movs	r3, #0
 8000408:	60fb      	str	r3, [r7, #12]
 800040a:	e030      	b.n	800046e <BubbleSort_SchedularTable+0x76>
	{
		for(j=0 ; j < n - i - 1 ; j++)
 800040c:	2300      	movs	r3, #0
 800040e:	60bb      	str	r3, [r7, #8]
 8000410:	e023      	b.n	800045a <BubbleSort_SchedularTable+0x62>
		{
			// Higher priority first
			if(OS_Control.OS_Tasks[j]->Priority > OS_Control.OS_Tasks[j+1]->Priority)
 8000412:	4a1c      	ldr	r2, [pc, #112]	; (8000484 <BubbleSort_SchedularTable+0x8c>)
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800041a:	791a      	ldrb	r2, [r3, #4]
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	3301      	adds	r3, #1
 8000420:	4918      	ldr	r1, [pc, #96]	; (8000484 <BubbleSort_SchedularTable+0x8c>)
 8000422:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000426:	791b      	ldrb	r3, [r3, #4]
 8000428:	429a      	cmp	r2, r3
 800042a:	d913      	bls.n	8000454 <BubbleSort_SchedularTable+0x5c>
			{
				TempTask = OS_Control.OS_Tasks[j];
 800042c:	4a15      	ldr	r2, [pc, #84]	; (8000484 <BubbleSort_SchedularTable+0x8c>)
 800042e:	68bb      	ldr	r3, [r7, #8]
 8000430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000434:	603b      	str	r3, [r7, #0]
				OS_Control.OS_Tasks[j] = OS_Control.OS_Tasks[j+1];
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	3301      	adds	r3, #1
 800043a:	4a12      	ldr	r2, [pc, #72]	; (8000484 <BubbleSort_SchedularTable+0x8c>)
 800043c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000440:	4910      	ldr	r1, [pc, #64]	; (8000484 <BubbleSort_SchedularTable+0x8c>)
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OS_Tasks[j+1] = TempTask;
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	3301      	adds	r3, #1
 800044c:	490d      	ldr	r1, [pc, #52]	; (8000484 <BubbleSort_SchedularTable+0x8c>)
 800044e:	683a      	ldr	r2, [r7, #0]
 8000450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(j=0 ; j < n - i - 1 ; j++)
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	3301      	adds	r3, #1
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	687a      	ldr	r2, [r7, #4]
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	1ad3      	subs	r3, r2, r3
 8000460:	3b01      	subs	r3, #1
 8000462:	68ba      	ldr	r2, [r7, #8]
 8000464:	429a      	cmp	r2, r3
 8000466:	d3d4      	bcc.n	8000412 <BubbleSort_SchedularTable+0x1a>
	for(i=0 ; i < n - 1 ; i++)
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	3301      	adds	r3, #1
 800046c:	60fb      	str	r3, [r7, #12]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	3b01      	subs	r3, #1
 8000472:	68fa      	ldr	r2, [r7, #12]
 8000474:	429a      	cmp	r2, r3
 8000476:	d3c9      	bcc.n	800040c <BubbleSort_SchedularTable+0x14>
		}
	}



}
 8000478:	bf00      	nop
 800047a:	3714      	adds	r7, #20
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	200001d4 	.word	0x200001d4

08000488 <MYRTOS_Update_SchedulerTable>:


// (Handler Mode)
void MYRTOS_Update_SchedulerTable()
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
	Task_Config* TempTaskDequeue = NULL;
 800048e:	2300      	movs	r3, #0
 8000490:	603b      	str	r3, [r7, #0]
	Task_Config *P_Task = NULL ,*P_nextTask = NULL;
 8000492:	2300      	movs	r3, #0
 8000494:	60bb      	str	r3, [r7, #8]
 8000496:	2300      	movs	r3, #0
 8000498:	607b      	str	r3, [r7, #4]
	int i = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	60fb      	str	r3, [r7, #12]

	// Update Scheduler table

	// 1- Bubble Sort Sch_Table in OS_Control --> OS_Tasks[100]
	//    based on priority (high then low)
	BubbleSort_SchedularTable();
 800049e:	f7ff ffab 	bl	80003f8 <BubbleSort_SchedularTable>

	// 2- Free Ready Queue
	while(FIFO_Deqeue(&ReadyQueue, &TempTaskDequeue /*Pointer to pointer*/) != FIFO_Empty);
 80004a2:	bf00      	nop
 80004a4:	463b      	mov	r3, r7
 80004a6:	4619      	mov	r1, r3
 80004a8:	4828      	ldr	r0, [pc, #160]	; (800054c <MYRTOS_Update_SchedulerTable+0xc4>)
 80004aa:	f7ff ff66 	bl	800037a <FIFO_Deqeue>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b02      	cmp	r3, #2
 80004b2:	d1f7      	bne.n	80004a4 <MYRTOS_Update_SchedulerTable+0x1c>


	// 3- Update Ready Queue
	while(i<OS_Control.ActiveTasksNum)
 80004b4:	e03d      	b.n	8000532 <MYRTOS_Update_SchedulerTable+0xaa>
	{
		P_Task = OS_Control.OS_Tasks[i];
 80004b6:	4a26      	ldr	r2, [pc, #152]	; (8000550 <MYRTOS_Update_SchedulerTable+0xc8>)
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004be:	60bb      	str	r3, [r7, #8]
		P_nextTask = OS_Control.OS_Tasks[i+1];
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	3301      	adds	r3, #1
 80004c4:	4a22      	ldr	r2, [pc, #136]	; (8000550 <MYRTOS_Update_SchedulerTable+0xc8>)
 80004c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ca:	607b      	str	r3, [r7, #4]

		if(P_Task->Task_State != Suspend){
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d02a      	beq.n	800052c <MYRTOS_Update_SchedulerTable+0xa4>
			// If we reached the end of the available Tasks
			// Then add the last one to the ready Queue and update its state
			// Because if we assumed its priority = 7, then the next one would be empty which is suspend(0) by default
			// Then we can't rely on the comparison of priority only

			if(P_nextTask->Task_State == Suspend)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d108      	bne.n	80004f2 <MYRTOS_Update_SchedulerTable+0x6a>
			{
				FIFO_Enqeue(&ReadyQueue, P_Task);
 80004e0:	68b9      	ldr	r1, [r7, #8]
 80004e2:	481a      	ldr	r0, [pc, #104]	; (800054c <MYRTOS_Update_SchedulerTable+0xc4>)
 80004e4:	f7ff ff06 	bl	80002f4 <FIFO_Enqeue>
				P_Task->Task_State = Ready;
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	2202      	movs	r2, #2
 80004ec:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
				break;
 80004f0:	e027      	b.n	8000542 <MYRTOS_Update_SchedulerTable+0xba>
			}

			// If the task is higher priority than the next one
			// Then add it to the readyQueue and break

			if(P_Task->Priority < P_nextTask->Priority)
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	791a      	ldrb	r2, [r3, #4]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	791b      	ldrb	r3, [r3, #4]
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d208      	bcs.n	8000510 <MYRTOS_Update_SchedulerTable+0x88>
			{
				FIFO_Enqeue(&ReadyQueue, P_Task);
 80004fe:	68b9      	ldr	r1, [r7, #8]
 8000500:	4812      	ldr	r0, [pc, #72]	; (800054c <MYRTOS_Update_SchedulerTable+0xc4>)
 8000502:	f7ff fef7 	bl	80002f4 <FIFO_Enqeue>
				P_Task->Task_State = Ready;
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	2202      	movs	r2, #2
 800050a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
				break;
 800050e:	e018      	b.n	8000542 <MYRTOS_Update_SchedulerTable+0xba>
			}else if(P_Task->Priority == P_nextTask->Priority)
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	791a      	ldrb	r2, [r3, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	791b      	ldrb	r3, [r3, #4]
 8000518:	429a      	cmp	r2, r3
 800051a:	d111      	bne.n	8000540 <MYRTOS_Update_SchedulerTable+0xb8>
			{
				// In case of same priority (Round robin)
				// Then push P_Task, and make P_Task = P_nextTask, and P_nextTask++
				FIFO_Enqeue(&ReadyQueue, P_Task);
 800051c:	68b9      	ldr	r1, [r7, #8]
 800051e:	480b      	ldr	r0, [pc, #44]	; (800054c <MYRTOS_Update_SchedulerTable+0xc4>)
 8000520:	f7ff fee8 	bl	80002f4 <FIFO_Enqeue>
				P_Task->Task_State = Ready;
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	2202      	movs	r2, #2
 8000528:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
				break;
			}
		}


		i++;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	3301      	adds	r3, #1
 8000530:	60fb      	str	r3, [r7, #12]
	while(i<OS_Control.ActiveTasksNum)
 8000532:	4b07      	ldr	r3, [pc, #28]	; (8000550 <MYRTOS_Update_SchedulerTable+0xc8>)
 8000534:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	429a      	cmp	r2, r3
 800053c:	d8bb      	bhi.n	80004b6 <MYRTOS_Update_SchedulerTable+0x2e>
	}

}
 800053e:	e000      	b.n	8000542 <MYRTOS_Update_SchedulerTable+0xba>
				break;
 8000540:	bf00      	nop
}
 8000542:	bf00      	nop
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	200003a8 	.word	0x200003a8
 8000550:	200001d4 	.word	0x200001d4

08000554 <Decide_WhatNextTask>:



// (Handler Mode)
void Decide_WhatNextTask()
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	// If ready Queue && OS_Control->CurrentTask != Suspend
	// Then make the current task run again till termination
	if((ReadyQueue.counter == 0) && (OS_Control.CurrentTaskExecuted->Task_State != Suspend))
 8000558:	4b24      	ldr	r3, [pc, #144]	; (80005ec <Decide_WhatNextTask+0x98>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d11a      	bne.n	8000596 <Decide_WhatNextTask+0x42>
 8000560:	4b23      	ldr	r3, [pc, #140]	; (80005f0 <Decide_WhatNextTask+0x9c>)
 8000562:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000566:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800056a:	2b00      	cmp	r3, #0
 800056c:	d013      	beq.n	8000596 <Decide_WhatNextTask+0x42>
	{
		OS_Control.CurrentTaskExecuted->Task_State = Running;
 800056e:	4b20      	ldr	r3, [pc, #128]	; (80005f0 <Decide_WhatNextTask+0x9c>)
 8000570:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000574:	2203      	movs	r2, #3
 8000576:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		FIFO_Enqeue(&ReadyQueue, OS_Control.CurrentTaskExecuted);
 800057a:	4b1d      	ldr	r3, [pc, #116]	; (80005f0 <Decide_WhatNextTask+0x9c>)
 800057c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000580:	4619      	mov	r1, r3
 8000582:	481a      	ldr	r0, [pc, #104]	; (80005ec <Decide_WhatNextTask+0x98>)
 8000584:	f7ff feb6 	bl	80002f4 <FIFO_Enqeue>
		// Make the current task next also, to run it again, if context switch happened
		OS_Control.NextTaskTobeExecuted = OS_Control.CurrentTaskExecuted;
 8000588:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <Decide_WhatNextTask+0x9c>)
 800058a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800058e:	4a18      	ldr	r2, [pc, #96]	; (80005f0 <Decide_WhatNextTask+0x9c>)
 8000590:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		{
			FIFO_Enqeue(&ReadyQueue, OS_Control.CurrentTaskExecuted);
			OS_Control.CurrentTaskExecuted->Task_State = Ready;
		}
	}
}
 8000594:	e027      	b.n	80005e6 <Decide_WhatNextTask+0x92>
		FIFO_Deqeue(&ReadyQueue, &OS_Control.NextTaskTobeExecuted);
 8000596:	4917      	ldr	r1, [pc, #92]	; (80005f4 <Decide_WhatNextTask+0xa0>)
 8000598:	4814      	ldr	r0, [pc, #80]	; (80005ec <Decide_WhatNextTask+0x98>)
 800059a:	f7ff feee 	bl	800037a <FIFO_Deqeue>
		OS_Control.NextTaskTobeExecuted->Task_State = Running;
 800059e:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <Decide_WhatNextTask+0x9c>)
 80005a0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80005a4:	2203      	movs	r2, #3
 80005a6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		if((OS_Control.CurrentTaskExecuted->Priority == OS_Control.NextTaskTobeExecuted->Priority) && (OS_Control.CurrentTaskExecuted->Task_State != Suspend))
 80005aa:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <Decide_WhatNextTask+0x9c>)
 80005ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005b0:	791a      	ldrb	r2, [r3, #4]
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <Decide_WhatNextTask+0x9c>)
 80005b4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80005b8:	791b      	ldrb	r3, [r3, #4]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d113      	bne.n	80005e6 <Decide_WhatNextTask+0x92>
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <Decide_WhatNextTask+0x9c>)
 80005c0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005c4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d00c      	beq.n	80005e6 <Decide_WhatNextTask+0x92>
			FIFO_Enqeue(&ReadyQueue, OS_Control.CurrentTaskExecuted);
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <Decide_WhatNextTask+0x9c>)
 80005ce:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005d2:	4619      	mov	r1, r3
 80005d4:	4805      	ldr	r0, [pc, #20]	; (80005ec <Decide_WhatNextTask+0x98>)
 80005d6:	f7ff fe8d 	bl	80002f4 <FIFO_Enqeue>
			OS_Control.CurrentTaskExecuted->Task_State = Ready;
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <Decide_WhatNextTask+0x9c>)
 80005dc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005e0:	2202      	movs	r2, #2
 80005e2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	200003a8 	.word	0x200003a8
 80005f0:	200001d4 	.word	0x200001d4
 80005f4:	20000378 	.word	0x20000378

080005f8 <OS_SVC_Services>:



// To execute specific OS service(Handler Mode)
void OS_SVC_Services(int* StackFramePointer)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	// OS_SVC_Set stack --> r0 = argument 0 = StackFramePointer
	// OS_SVC_Set stack --> r0,r1,r2,r3,r12,lr,pc,xpsr

	unsigned char SVC_Number;

	SVC_Number = *((unsigned char*)(((unsigned char*)StackFramePointer[6]) - 2));
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3318      	adds	r3, #24
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	3b02      	subs	r3, #2
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	73fb      	strb	r3, [r7, #15]


	switch(SVC_Number)
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	2b04      	cmp	r3, #4
 8000610:	d829      	bhi.n	8000666 <OS_SVC_Services+0x6e>
 8000612:	a201      	add	r2, pc, #4	; (adr r2, 8000618 <OS_SVC_Services+0x20>)
 8000614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000618:	0800062d 	.word	0x0800062d
 800061c:	0800062d 	.word	0x0800062d
 8000620:	0800065b 	.word	0x0800065b
 8000624:	08000661 	.word	0x08000661
 8000628:	08000661 	.word	0x08000661
	{
	case SVC_ActivateTask:
	case SVC_TerminateTask:
		// Update Scheduler table & Ready Queue
		MYRTOS_Update_SchedulerTable();
 800062c:	f7ff ff2c 	bl	8000488 <MYRTOS_Update_SchedulerTable>

		// if OS is in running state
		if(OS_Control.OS_Modes_ID == OS_Running)
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <OS_SVC_Services+0x78>)
 8000632:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8000636:	2b01      	cmp	r3, #1
 8000638:	d114      	bne.n	8000664 <OS_SVC_Services+0x6c>
		{
			// Idle task would be called manually
			if(strcmp(OS_Control.CurrentTaskExecuted->TaskName,"idleTask")!=0)
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <OS_SVC_Services+0x78>)
 800063c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000640:	3318      	adds	r3, #24
 8000642:	490c      	ldr	r1, [pc, #48]	; (8000674 <OS_SVC_Services+0x7c>)
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff fd93 	bl	8000170 <strcmp>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d009      	beq.n	8000664 <OS_SVC_Services+0x6c>
			{
				// Decide what next(Enqueue/Dequeue)
				Decide_WhatNextTask();
 8000650:	f7ff ff80 	bl	8000554 <Decide_WhatNextTask>

				// Trigger OS_PendSV (Switch Context/Restore)
				Trigger_OS_PendSV();
 8000654:	f7ff fdf8 	bl	8000248 <Trigger_OS_PendSV>

			}
		}

		break;
 8000658:	e004      	b.n	8000664 <OS_SVC_Services+0x6c>

	case SVC_TaskWaitingTime:
		MYRTOS_Update_SchedulerTable();
 800065a:	f7ff ff15 	bl	8000488 <MYRTOS_Update_SchedulerTable>


		break;
 800065e:	e002      	b.n	8000666 <OS_SVC_Services+0x6e>
	case SVC_AcquireMutex:




		break;
 8000660:	bf00      	nop
 8000662:	e000      	b.n	8000666 <OS_SVC_Services+0x6e>
		break;
 8000664:	bf00      	nop
		break;


	}

}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200001d4 	.word	0x200001d4
 8000674:	080013b0 	.word	0x080013b0

08000678 <PendSV_Handler>:
	 * Save context for the current task
	 ***********************************/

	// Get current task "Current PSP from CPU Register after pushing xpsr-->r0"
	// And put this value inside current PSP of the current task
	OS_GET_PSP(OS_Control.CurrentTaskExecuted->Current_PSP);
 8000678:	4b6f      	ldr	r3, [pc, #444]	; (8000838 <PendSV_Handler+0x1c0>)
 800067a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800067e:	f3ef 8009 	mrs	r0, PSP
 8000682:	4602      	mov	r2, r0
 8000684:	615a      	str	r2, [r3, #20]

	// Using this PSP(pointer in the current task) to store (R4 to R11)
	OS_Control.CurrentTaskExecuted->Current_PSP--;
 8000686:	4b6c      	ldr	r3, [pc, #432]	; (8000838 <PendSV_Handler+0x1c0>)
 8000688:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800068c:	695a      	ldr	r2, [r3, #20]
 800068e:	3a04      	subs	r2, #4
 8000690:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r4":"=r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 8000692:	4b69      	ldr	r3, [pc, #420]	; (8000838 <PendSV_Handler+0x1c0>)
 8000694:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	4622      	mov	r2, r4
 800069c:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTaskExecuted->Current_PSP--;
 800069e:	4b66      	ldr	r3, [pc, #408]	; (8000838 <PendSV_Handler+0x1c0>)
 80006a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006a4:	695a      	ldr	r2, [r3, #20]
 80006a6:	3a04      	subs	r2, #4
 80006a8:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r5":"=r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 80006aa:	4b63      	ldr	r3, [pc, #396]	; (8000838 <PendSV_Handler+0x1c0>)
 80006ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	462a      	mov	r2, r5
 80006b4:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTaskExecuted->Current_PSP--;
 80006b6:	4b60      	ldr	r3, [pc, #384]	; (8000838 <PendSV_Handler+0x1c0>)
 80006b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006bc:	695a      	ldr	r2, [r3, #20]
 80006be:	3a04      	subs	r2, #4
 80006c0:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r6":"=r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 80006c2:	4b5d      	ldr	r3, [pc, #372]	; (8000838 <PendSV_Handler+0x1c0>)
 80006c4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	4632      	mov	r2, r6
 80006cc:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTaskExecuted->Current_PSP--;
 80006ce:	4b5a      	ldr	r3, [pc, #360]	; (8000838 <PendSV_Handler+0x1c0>)
 80006d0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006d4:	695a      	ldr	r2, [r3, #20]
 80006d6:	3a04      	subs	r2, #4
 80006d8:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r7":"=r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 80006da:	4b57      	ldr	r3, [pc, #348]	; (8000838 <PendSV_Handler+0x1c0>)
 80006dc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	463a      	mov	r2, r7
 80006e4:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTaskExecuted->Current_PSP--;
 80006e6:	4b54      	ldr	r3, [pc, #336]	; (8000838 <PendSV_Handler+0x1c0>)
 80006e8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006ec:	695a      	ldr	r2, [r3, #20]
 80006ee:	3a04      	subs	r2, #4
 80006f0:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r8":"=r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 80006f2:	4b51      	ldr	r3, [pc, #324]	; (8000838 <PendSV_Handler+0x1c0>)
 80006f4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	4642      	mov	r2, r8
 80006fc:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTaskExecuted->Current_PSP--;
 80006fe:	4b4e      	ldr	r3, [pc, #312]	; (8000838 <PendSV_Handler+0x1c0>)
 8000700:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000704:	695a      	ldr	r2, [r3, #20]
 8000706:	3a04      	subs	r2, #4
 8000708:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r9":"=r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 800070a:	4b4b      	ldr	r3, [pc, #300]	; (8000838 <PendSV_Handler+0x1c0>)
 800070c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	464a      	mov	r2, r9
 8000714:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTaskExecuted->Current_PSP--;
 8000716:	4b48      	ldr	r3, [pc, #288]	; (8000838 <PendSV_Handler+0x1c0>)
 8000718:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800071c:	695a      	ldr	r2, [r3, #20]
 800071e:	3a04      	subs	r2, #4
 8000720:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r10":"=r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 8000722:	4b45      	ldr	r3, [pc, #276]	; (8000838 <PendSV_Handler+0x1c0>)
 8000724:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	4652      	mov	r2, sl
 800072c:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTaskExecuted->Current_PSP--;
 800072e:	4b42      	ldr	r3, [pc, #264]	; (8000838 <PendSV_Handler+0x1c0>)
 8000730:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000734:	695a      	ldr	r2, [r3, #20]
 8000736:	3a04      	subs	r2, #4
 8000738:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r11":"=r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 800073a:	4b3f      	ldr	r3, [pc, #252]	; (8000838 <PendSV_Handler+0x1c0>)
 800073c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	465a      	mov	r2, fp
 8000744:	601a      	str	r2, [r3, #0]
	/************************************
	 * Restore context for the next task
	 ***********************************/


	if(OS_Control.NextTaskTobeExecuted != NULL)
 8000746:	4b3c      	ldr	r3, [pc, #240]	; (8000838 <PendSV_Handler+0x1c0>)
 8000748:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800074c:	2b00      	cmp	r3, #0
 800074e:	d009      	beq.n	8000764 <PendSV_Handler+0xec>
	{
		OS_Control.CurrentTaskExecuted = OS_Control.NextTaskTobeExecuted;
 8000750:	4b39      	ldr	r3, [pc, #228]	; (8000838 <PendSV_Handler+0x1c0>)
 8000752:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000756:	4a38      	ldr	r2, [pc, #224]	; (8000838 <PendSV_Handler+0x1c0>)
 8000758:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		OS_Control.NextTaskTobeExecuted = NULL;
 800075c:	4b36      	ldr	r3, [pc, #216]	; (8000838 <PendSV_Handler+0x1c0>)
 800075e:	2200      	movs	r2, #0
 8000760:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	}



	__asm volatile("mov r11,%0": : "r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 8000764:	4b34      	ldr	r3, [pc, #208]	; (8000838 <PendSV_Handler+0x1c0>)
 8000766:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	469b      	mov	fp, r3
	OS_Control.CurrentTaskExecuted->Current_PSP++;
 8000770:	4b31      	ldr	r3, [pc, #196]	; (8000838 <PendSV_Handler+0x1c0>)
 8000772:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000776:	695a      	ldr	r2, [r3, #20]
 8000778:	3204      	adds	r2, #4
 800077a:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r10,%0": : "r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 800077c:	4b2e      	ldr	r3, [pc, #184]	; (8000838 <PendSV_Handler+0x1c0>)
 800077e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	469a      	mov	sl, r3
	OS_Control.CurrentTaskExecuted->Current_PSP++;
 8000788:	4b2b      	ldr	r3, [pc, #172]	; (8000838 <PendSV_Handler+0x1c0>)
 800078a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800078e:	695a      	ldr	r2, [r3, #20]
 8000790:	3204      	adds	r2, #4
 8000792:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r9,%0": : "r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 8000794:	4b28      	ldr	r3, [pc, #160]	; (8000838 <PendSV_Handler+0x1c0>)
 8000796:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800079a:	695b      	ldr	r3, [r3, #20]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4699      	mov	r9, r3
	OS_Control.CurrentTaskExecuted->Current_PSP++;
 80007a0:	4b25      	ldr	r3, [pc, #148]	; (8000838 <PendSV_Handler+0x1c0>)
 80007a2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007a6:	695a      	ldr	r2, [r3, #20]
 80007a8:	3204      	adds	r2, #4
 80007aa:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r8,%0": : "r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 80007ac:	4b22      	ldr	r3, [pc, #136]	; (8000838 <PendSV_Handler+0x1c0>)
 80007ae:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4698      	mov	r8, r3
	OS_Control.CurrentTaskExecuted->Current_PSP++;
 80007b8:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <PendSV_Handler+0x1c0>)
 80007ba:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007be:	695a      	ldr	r2, [r3, #20]
 80007c0:	3204      	adds	r2, #4
 80007c2:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r7,%0": : "r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 80007c4:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <PendSV_Handler+0x1c0>)
 80007c6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007ca:	695b      	ldr	r3, [r3, #20]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	461f      	mov	r7, r3
	OS_Control.CurrentTaskExecuted->Current_PSP++;
 80007d0:	4b19      	ldr	r3, [pc, #100]	; (8000838 <PendSV_Handler+0x1c0>)
 80007d2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007d6:	695a      	ldr	r2, [r3, #20]
 80007d8:	3204      	adds	r2, #4
 80007da:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r6,%0": : "r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 80007dc:	4b16      	ldr	r3, [pc, #88]	; (8000838 <PendSV_Handler+0x1c0>)
 80007de:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007e2:	695b      	ldr	r3, [r3, #20]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	461e      	mov	r6, r3
	OS_Control.CurrentTaskExecuted->Current_PSP++;
 80007e8:	4b13      	ldr	r3, [pc, #76]	; (8000838 <PendSV_Handler+0x1c0>)
 80007ea:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007ee:	695a      	ldr	r2, [r3, #20]
 80007f0:	3204      	adds	r2, #4
 80007f2:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r5,%0": : "r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 80007f4:	4b10      	ldr	r3, [pc, #64]	; (8000838 <PendSV_Handler+0x1c0>)
 80007f6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007fa:	695b      	ldr	r3, [r3, #20]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	461d      	mov	r5, r3
	OS_Control.CurrentTaskExecuted->Current_PSP++;
 8000800:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <PendSV_Handler+0x1c0>)
 8000802:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000806:	695a      	ldr	r2, [r3, #20]
 8000808:	3204      	adds	r2, #4
 800080a:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r4,%0": : "r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <PendSV_Handler+0x1c0>)
 800080e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000812:	695b      	ldr	r3, [r3, #20]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	461c      	mov	r4, r3
	OS_Control.CurrentTaskExecuted->Current_PSP++;
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <PendSV_Handler+0x1c0>)
 800081a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800081e:	695a      	ldr	r2, [r3, #20]
 8000820:	3204      	adds	r2, #4
 8000822:	615a      	str	r2, [r3, #20]


	// Update PSP to point to the task we want enter
	OS_SET_PSP(OS_Control.CurrentTaskExecuted->Current_PSP);
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <PendSV_Handler+0x1c0>)
 8000826:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	4618      	mov	r0, r3
 800082e:	f380 8809 	msr	PSP, r0

	__asm volatile("BX LR");
 8000832:	4770      	bx	lr
}
 8000834:	bf00      	nop
 8000836:	bf00      	nop
 8000838:	200001d4 	.word	0x200001d4

0800083c <MYRTOS_Create_MainStack>:


void MYRTOS_Create_MainStack()
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
	OS_Control._S_MSP = (uint32_t)&_estack;
 8000840:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <MYRTOS_Create_MainStack+0x34>)
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MYRTOS_Create_MainStack+0x38>)
 8000844:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP = OS_Control._S_MSP - MainStackSize;
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <MYRTOS_Create_MainStack+0x38>)
 800084a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800084e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000852:	4a08      	ldr	r2, [pc, #32]	; (8000874 <MYRTOS_Create_MainStack+0x38>)
 8000854:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	// Align 8 Bytes space between Main stack and Process stack
	OS_Control.PSP_Task_Locator = (OS_Control._E_MSP - 8);
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MYRTOS_Create_MainStack+0x38>)
 800085a:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800085e:	3b08      	subs	r3, #8
 8000860:	4a04      	ldr	r2, [pc, #16]	; (8000874 <MYRTOS_Create_MainStack+0x38>)
 8000862:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	20002800 	.word	0x20002800
 8000874:	200001d4 	.word	0x200001d4

08000878 <MyRTOS_Idle_Task>:

uint8_t idleTaskIndication;

void MyRTOS_Idle_Task()
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
	while(1)
	{
		idleTaskIndication^=1;
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <MyRTOS_Idle_Task+0x18>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	f083 0301 	eor.w	r3, r3, #1
 8000884:	b2da      	uxtb	r2, r3
 8000886:	4b02      	ldr	r3, [pc, #8]	; (8000890 <MyRTOS_Idle_Task+0x18>)
 8000888:	701a      	strb	r2, [r3, #0]
		__asm("wfe");
 800088a:	bf20      	wfe
		idleTaskIndication^=1;
 800088c:	e7f6      	b.n	800087c <MyRTOS_Idle_Task+0x4>
 800088e:	bf00      	nop
 8000890:	20000040 	.word	0x20000040

08000894 <MYRTOS_Init>:
}



MYRTOS_errorID MYRTOS_Init()
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
	MYRTOS_errorID ErrorState = NO_ERROR;
 800089a:	2300      	movs	r3, #0
 800089c:	71fb      	strb	r3, [r7, #7]

	// Update OS Mode (Suspend)
	OS_Control.OS_Modes_ID = OS_Suspend;
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MYRTOS_Init+0x64>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	// Specify the Main stack for the OS
	MYRTOS_Create_MainStack();
 80008a6:	f7ff ffc9 	bl	800083c <MYRTOS_Create_MainStack>



	// Create OS Ready Queue
	if((FIFO_Init(&ReadyQueue, ReadyQueueFIFO, 100)) != FIFO_No_Error)
 80008aa:	2264      	movs	r2, #100	; 0x64
 80008ac:	4913      	ldr	r1, [pc, #76]	; (80008fc <MYRTOS_Init+0x68>)
 80008ae:	4814      	ldr	r0, [pc, #80]	; (8000900 <MYRTOS_Init+0x6c>)
 80008b0:	f7ff fcfe 	bl	80002b0 <FIFO_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d002      	beq.n	80008c0 <MYRTOS_Init+0x2c>
		ErrorState += ReadyQueue_Init_Error;
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	3301      	adds	r3, #1
 80008be:	71fb      	strb	r3, [r7, #7]


	// Configure idle task
	strcpy(MYRTOS_IdleTask.TaskName,"idleTask");
 80008c0:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MYRTOS_Init+0x70>)
 80008c2:	4a11      	ldr	r2, [pc, #68]	; (8000908 <MYRTOS_Init+0x74>)
 80008c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80008c6:	c303      	stmia	r3!, {r0, r1}
 80008c8:	701a      	strb	r2, [r3, #0]
	MYRTOS_IdleTask.Priority = 255;    // The least priority
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <MYRTOS_Init+0x78>)
 80008cc:	22ff      	movs	r2, #255	; 0xff
 80008ce:	711a      	strb	r2, [r3, #4]
	MYRTOS_IdleTask.P_TaskEntry = MyRTOS_Idle_Task;
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MYRTOS_Init+0x78>)
 80008d2:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <MYRTOS_Init+0x7c>)
 80008d4:	609a      	str	r2, [r3, #8]
	MYRTOS_IdleTask.Stack_Size = 300;  // Bytes
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <MYRTOS_Init+0x78>)
 80008d8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80008dc:	601a      	str	r2, [r3, #0]

	ErrorState += MYRTOS_Create_Task(&MYRTOS_IdleTask);
 80008de:	480b      	ldr	r0, [pc, #44]	; (800090c <MYRTOS_Init+0x78>)
 80008e0:	f000 f856 	bl	8000990 <MYRTOS_Create_Task>
 80008e4:	4603      	mov	r3, r0
 80008e6:	461a      	mov	r2, r3
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	4413      	add	r3, r2
 80008ec:	71fb      	strb	r3, [r7, #7]

	return ErrorState;
 80008ee:	79fb      	ldrb	r3, [r7, #7]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200001d4 	.word	0x200001d4
 80008fc:	20000044 	.word	0x20000044
 8000900:	200003a8 	.word	0x200003a8
 8000904:	200003d4 	.word	0x200003d4
 8000908:	080013b0 	.word	0x080013b0
 800090c:	200003bc 	.word	0x200003bc
 8000910:	08000879 	.word	0x08000879

08000914 <MYRTOS_Create_Stack>:


void MYRTOS_Create_Stack(Task_Config* taskReference)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	 * 	- r0
	 *
	 * 	//// (Manually defined to save the value of registers (Manually pushed and restored))
	 * 	r5, r6, r7, r8, r9, r10, r11
	 */
	taskReference->Current_PSP = (uint32_t *)(taskReference->_S_PSP_Task);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	461a      	mov	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	615a      	str	r2, [r3, #20]

	taskReference->Current_PSP--;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	1f1a      	subs	r2, r3, #4
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	615a      	str	r2, [r3, #20]
	*(taskReference->Current_PSP) = 0x01000000;  // Dummy psr (by default T=1 Thumb2) to avoid bus fault
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000938:	601a      	str	r2, [r3, #0]

	taskReference->Current_PSP--;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	1f1a      	subs	r2, r3, #4
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	615a      	str	r2, [r3, #20]
	*(taskReference->Current_PSP) = (unsigned int)(taskReference->P_TaskEntry);   // PC value
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	689a      	ldr	r2, [r3, #8]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	695b      	ldr	r3, [r3, #20]
 800094c:	601a      	str	r2, [r3, #0]

	taskReference->Current_PSP--;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	1f1a      	subs	r2, r3, #4
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	615a      	str	r2, [r3, #20]
	*(taskReference->Current_PSP) = (unsigned int)(0xFFFFFFFD);   // (Dummy value)As if LR (This function came from interrupt
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	f06f 0202 	mvn.w	r2, #2
 8000960:	601a      	str	r2, [r3, #0]

	// The rest is 13 registers we want to push with 0 for now
	for(int j=0;j<13;j++)
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	e00b      	b.n	8000980 <MYRTOS_Create_Stack+0x6c>
	{
		taskReference->Current_PSP--;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	695b      	ldr	r3, [r3, #20]
 800096c:	1f1a      	subs	r2, r3, #4
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	615a      	str	r2, [r3, #20]
		*(taskReference->Current_PSP) = 0;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
	for(int j=0;j<13;j++)
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	3301      	adds	r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	2b0c      	cmp	r3, #12
 8000984:	ddf0      	ble.n	8000968 <MYRTOS_Create_Stack+0x54>
	}
}
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr

08000990 <MYRTOS_Create_Task>:



MYRTOS_errorID MYRTOS_Create_Task(Task_Config* taskReference)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	MYRTOS_errorID ErrorState = NO_ERROR;
 8000998:	2300      	movs	r3, #0
 800099a:	73fb      	strb	r3, [r7, #15]

	// Create its own PS Stack
	taskReference->_S_PSP_Task = OS_Control.PSP_Task_Locator;
 800099c:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <MYRTOS_Create_Task+0x74>)
 800099e:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	60da      	str	r2, [r3, #12]
	taskReference->_E_PSP_Task = taskReference->_S_PSP_Task -  taskReference->Stack_Size;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	68da      	ldr	r2, [r3, #12]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	1ad2      	subs	r2, r2, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	611a      	str	r2, [r3, #16]

	// Check that task size isn't exceeding Process stack size
	if(taskReference->_E_PSP_Task < (uint32_t)(&_eheap))
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	691b      	ldr	r3, [r3, #16]
 80009b8:	4a13      	ldr	r2, [pc, #76]	; (8000a08 <MYRTOS_Create_Task+0x78>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d201      	bcs.n	80009c2 <MYRTOS_Create_Task+0x32>
		return Task_Exceeded_Stack_Size;
 80009be:	2302      	movs	r3, #2
 80009c0:	e01b      	b.n	80009fa <MYRTOS_Create_Task+0x6a>

	// Align 8 Byte for the next task PS stack
	OS_Control.PSP_Task_Locator = taskReference->_E_PSP_Task - 8;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	691b      	ldr	r3, [r3, #16]
 80009c6:	3b08      	subs	r3, #8
 80009c8:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <MYRTOS_Create_Task+0x74>)
 80009ca:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	// - _eheap


	// Initialize PS Task Stack
	MYRTOS_Create_Stack(taskReference);
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f7ff ffa0 	bl	8000914 <MYRTOS_Create_Stack>

	// Update scheduler table
	OS_Control.OS_Tasks[OS_Control.ActiveTasksNum] = taskReference;
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <MYRTOS_Create_Task+0x74>)
 80009d6:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80009da:	490a      	ldr	r1, [pc, #40]	; (8000a04 <MYRTOS_Create_Task+0x74>)
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control.ActiveTasksNum++;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <MYRTOS_Create_Task+0x74>)
 80009e4:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80009e8:	3301      	adds	r3, #1
 80009ea:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <MYRTOS_Create_Task+0x74>)
 80009ec:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c

	// Task state update (Suspend mode)
	taskReference->Task_State = Suspend;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2200      	movs	r2, #0
 80009f4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	return ErrorState;
 80009f8:	7bfb      	ldrb	r3, [r7, #15]

}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200001d4 	.word	0x200001d4
 8000a08:	20000828 	.word	0x20000828

08000a0c <MYRTOS_OS_SVC_Set>:




void MYRTOS_OS_SVC_Set(SVC_ID ID)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
	switch(ID)
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	2b04      	cmp	r3, #4
 8000a1a:	d817      	bhi.n	8000a4c <MYRTOS_OS_SVC_Set+0x40>
 8000a1c:	a201      	add	r2, pc, #4	; (adr r2, 8000a24 <MYRTOS_OS_SVC_Set+0x18>)
 8000a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a22:	bf00      	nop
 8000a24:	08000a39 	.word	0x08000a39
 8000a28:	08000a3d 	.word	0x08000a3d
 8000a2c:	08000a41 	.word	0x08000a41
 8000a30:	08000a45 	.word	0x08000a45
 8000a34:	08000a49 	.word	0x08000a49
	{
	case SVC_ActivateTask:
		__asm("svc #0x00");
 8000a38:	df00      	svc	0
		break;
 8000a3a:	e007      	b.n	8000a4c <MYRTOS_OS_SVC_Set+0x40>

	case SVC_TerminateTask:
		__asm("svc #0x01");
 8000a3c:	df01      	svc	1
		break;
 8000a3e:	e005      	b.n	8000a4c <MYRTOS_OS_SVC_Set+0x40>

	case SVC_TaskWaitingTime:
		__asm("svc #0x02");
 8000a40:	df02      	svc	2
		break;
 8000a42:	e003      	b.n	8000a4c <MYRTOS_OS_SVC_Set+0x40>

	case SVC_AcquireMutex:
		__asm("svc #0x03");
 8000a44:	df03      	svc	3
		break;
 8000a46:	e001      	b.n	8000a4c <MYRTOS_OS_SVC_Set+0x40>

	case SVC_ReleaseMutex:
		__asm("svc #0x04");
 8000a48:	df04      	svc	4
		break;
 8000a4a:	bf00      	nop

	}
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <MYRTOS_Activate_Task>:




MYRTOS_errorID MYRTOS_Activate_Task(Task_Config* taskReference)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	MYRTOS_errorID ErrorState = NO_ERROR;
 8000a60:	2300      	movs	r3, #0
 8000a62:	73fb      	strb	r3, [r7, #15]

	// Update task state
	taskReference->Task_State = Waiting;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2201      	movs	r2, #1
 8000a68:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36


	// Update Scheduler table
	MYRTOS_OS_SVC_Set(SVC_ActivateTask);
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f7ff ffcd 	bl	8000a0c <MYRTOS_OS_SVC_Set>

	return ErrorState;
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <MYRTOS_Terminate_Task>:




MYRTOS_errorID MYRTOS_Terminate_Task(Task_Config* taskReference)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	MYRTOS_errorID ErrorState = NO_ERROR;
 8000a84:	2300      	movs	r3, #0
 8000a86:	73fb      	strb	r3, [r7, #15]

	taskReference->Task_State = Suspend;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	MYRTOS_OS_SVC_Set(SVC_TerminateTask);
 8000a90:	2001      	movs	r0, #1
 8000a92:	f7ff ffbb 	bl	8000a0c <MYRTOS_OS_SVC_Set>

	return ErrorState;
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <MYRTOS_Update_Tasks_WaitingTime>:


void MYRTOS_Update_Tasks_WaitingTime()
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
	// Update time related to any task waiting for that time (Blocking based on time)

	int i;
	for(i=0;i<OS_Control.ActiveTasksNum;i++)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	e031      	b.n	8000b10 <MYRTOS_Update_Tasks_WaitingTime+0x70>
	{
		// Check if the task is suspended due to blocking based on time
		if((OS_Control.OS_Tasks[i]->Task_State == Suspend) && (OS_Control.OS_Tasks[i]->Time_Waiting.Block_Timing == Blocking_Enable))
 8000aac:	4a1d      	ldr	r2, [pc, #116]	; (8000b24 <MYRTOS_Update_Tasks_WaitingTime+0x84>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d126      	bne.n	8000b0a <MYRTOS_Update_Tasks_WaitingTime+0x6a>
 8000abc:	4a19      	ldr	r2, [pc, #100]	; (8000b24 <MYRTOS_Update_Tasks_WaitingTime+0x84>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d11e      	bne.n	8000b0a <MYRTOS_Update_Tasks_WaitingTime+0x6a>
		{
			// Decrease its number of ticks
			OS_Control.OS_Tasks[i]->Time_Waiting.Ticks_Count--;
 8000acc:	4a15      	ldr	r2, [pc, #84]	; (8000b24 <MYRTOS_Update_Tasks_WaitingTime+0x84>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ad6:	3a01      	subs	r2, #1
 8000ad8:	63da      	str	r2, [r3, #60]	; 0x3c
			if(OS_Control.OS_Tasks[i]->Time_Waiting.Ticks_Count == 1)
 8000ada:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <MYRTOS_Update_Tasks_WaitingTime+0x84>)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d110      	bne.n	8000b0a <MYRTOS_Update_Tasks_WaitingTime+0x6a>
			{
				OS_Control.OS_Tasks[i]->Time_Waiting.Block_Timing = Blocking_Disable;
 8000ae8:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <MYRTOS_Update_Tasks_WaitingTime+0x84>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af0:	2200      	movs	r2, #0
 8000af2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				OS_Control.OS_Tasks[i]->Task_State = Waiting;
 8000af6:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <MYRTOS_Update_Tasks_WaitingTime+0x84>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000afe:	2201      	movs	r2, #1
 8000b00:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
				MYRTOS_OS_SVC_Set(SVC_TaskWaitingTime);
 8000b04:	2002      	movs	r0, #2
 8000b06:	f7ff ff81 	bl	8000a0c <MYRTOS_OS_SVC_Set>
	for(i=0;i<OS_Control.ActiveTasksNum;i++)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <MYRTOS_Update_Tasks_WaitingTime+0x84>)
 8000b12:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d8c7      	bhi.n	8000aac <MYRTOS_Update_Tasks_WaitingTime+0xc>
		}
	}



}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	200001d4 	.word	0x200001d4

08000b28 <MYRTOS_AcquireMutex>:
Task_Config *TasksAcquiringMutex[NUM_TASKS_ACQUIRED_MUTEX];
uint8_t AcquiringCounter = 0;


MYRTOS_errorID MYRTOS_AcquireMutex(Mutex_Config *Mutex, Task_Config* taskReference)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
	MYRTOS_errorID errorState = NO_ERROR;
 8000b32:	2300      	movs	r3, #0
 8000b34:	73fb      	strb	r3, [r7, #15]


	// Check if the Mutex being locked by another task(And check its priority)
	if(Mutex->currentTask != NULL)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6a1b      	ldr	r3, [r3, #32]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d030      	beq.n	8000ba0 <MYRTOS_AcquireMutex+0x78>
	{
		// This Mutex supports two tasks only, one currently, and if another one waiting
		if(Mutex->nextTask == NULL)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d12a      	bne.n	8000b9c <MYRTOS_AcquireMutex+0x74>
		{


			// Solve Deadlock problem, by preventing any task having mutex to acquire another one
			for(int j=0;j<NUM_TASKS_ACQUIRED_MUTEX;j++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	e00b      	b.n	8000b64 <MYRTOS_AcquireMutex+0x3c>
			{
				if(taskReference == TasksAcquiringMutex[j])
 8000b4c:	4a2b      	ldr	r2, [pc, #172]	; (8000bfc <MYRTOS_AcquireMutex+0xd4>)
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b54:	683a      	ldr	r2, [r7, #0]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d101      	bne.n	8000b5e <MYRTOS_AcquireMutex+0x36>
				{
					return Mutex_Prevent_Deadlock;
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	e049      	b.n	8000bf2 <MYRTOS_AcquireMutex+0xca>
			for(int j=0;j<NUM_TASKS_ACQUIRED_MUTEX;j++)
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	3301      	adds	r3, #1
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	2b09      	cmp	r3, #9
 8000b68:	ddf0      	ble.n	8000b4c <MYRTOS_AcquireMutex+0x24>
				}
			}

			Mutex->nextTask = taskReference;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	683a      	ldr	r2, [r7, #0]
 8000b6e:	625a      	str	r2, [r3, #36]	; 0x24
			taskReference->Task_State = Suspend;      // Suspended till releasing of the mutex
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	2200      	movs	r2, #0
 8000b74:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

			// Priority inheritance protocol (to solve "Priority inversion")
			if(Mutex->currentTask->Priority > Mutex->nextTask->Priority)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6a1b      	ldr	r3, [r3, #32]
 8000b7c:	791a      	ldrb	r2, [r3, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b82:	791b      	ldrb	r3, [r3, #4]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d905      	bls.n	8000b94 <MYRTOS_AcquireMutex+0x6c>
			{
				Mutex->currentTask->Priority = Mutex->nextTask->Priority;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6a1b      	ldr	r3, [r3, #32]
 8000b90:	7912      	ldrb	r2, [r2, #4]
 8000b92:	711a      	strb	r2, [r3, #4]
			}


			MYRTOS_OS_SVC_Set(SVC_TerminateTask);
 8000b94:	2001      	movs	r0, #1
 8000b96:	f7ff ff39 	bl	8000a0c <MYRTOS_OS_SVC_Set>
 8000b9a:	e029      	b.n	8000bf0 <MYRTOS_AcquireMutex+0xc8>
		}else{
			return MutexReachedMaximumNumber;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	e028      	b.n	8000bf2 <MYRTOS_AcquireMutex+0xca>
	{



		// Mutex is not locked by any task
		Mutex->currentTask = taskReference;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	683a      	ldr	r2, [r7, #0]
 8000ba4:	621a      	str	r2, [r3, #32]
		// To Store the priority of the task in a variable, to restore it when the mutex is released
		Mutex->Main_TaskPriority = Mutex->currentTask->Priority;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6a1b      	ldr	r3, [r3, #32]
 8000baa:	791a      	ldrb	r2, [r3, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

		for(int j=0;j<NUM_TASKS_ACQUIRED_MUTEX;j++)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	e00b      	b.n	8000bd0 <MYRTOS_AcquireMutex+0xa8>
		{
			if(taskReference == TasksAcquiringMutex[j])
 8000bb8:	4a10      	ldr	r2, [pc, #64]	; (8000bfc <MYRTOS_AcquireMutex+0xd4>)
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc0:	683a      	ldr	r2, [r7, #0]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d101      	bne.n	8000bca <MYRTOS_AcquireMutex+0xa2>
			{
				return errorState;
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	e013      	b.n	8000bf2 <MYRTOS_AcquireMutex+0xca>
		for(int j=0;j<NUM_TASKS_ACQUIRED_MUTEX;j++)
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	2b09      	cmp	r3, #9
 8000bd4:	ddf0      	ble.n	8000bb8 <MYRTOS_AcquireMutex+0x90>
			}
		}


		TasksAcquiringMutex[AcquiringCounter] = taskReference;
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <MYRTOS_AcquireMutex+0xd8>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <MYRTOS_AcquireMutex+0xd4>)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		AcquiringCounter++;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MYRTOS_AcquireMutex+0xd8>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <MYRTOS_AcquireMutex+0xd8>)
 8000bee:	701a      	strb	r2, [r3, #0]
	}

	return errorState;
 8000bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000380 	.word	0x20000380
 8000c00:	20000020 	.word	0x20000020

08000c04 <MYRTOS_ReleaseMutex>:




MYRTOS_errorID MYRTOS_ReleaseMutex(Mutex_Config *Mutex)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	MYRTOS_errorID errorState = NO_ERROR;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	72fb      	strb	r3, [r7, #11]

	if(Mutex->currentTask != NULL)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6a1b      	ldr	r3, [r3, #32]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d030      	beq.n	8000c7a <MYRTOS_ReleaseMutex+0x76>
	{
		// Restore the priority of the task
		Mutex->currentTask->Priority = Mutex->Main_TaskPriority;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6a1b      	ldr	r3, [r3, #32]
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8000c22:	711a      	strb	r2, [r3, #4]

		Mutex->Main_TaskPriority = Mutex->nextTask->Priority;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c28:	791a      	ldrb	r2, [r3, #4]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d


		for(int j=0;j<NUM_TASKS_ACQUIRED_MUTEX;j++)
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	e00f      	b.n	8000c56 <MYRTOS_ReleaseMutex+0x52>
		{
			if(Mutex->currentTask == TasksAcquiringMutex[j])
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6a1a      	ldr	r2, [r3, #32]
 8000c3a:	4912      	ldr	r1, [pc, #72]	; (8000c84 <MYRTOS_ReleaseMutex+0x80>)
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d104      	bne.n	8000c50 <MYRTOS_ReleaseMutex+0x4c>
			{
				TasksAcquiringMutex[j] = NULL;
 8000c46:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <MYRTOS_ReleaseMutex+0x80>)
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int j=0;j<NUM_TASKS_ACQUIRED_MUTEX;j++)
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	3301      	adds	r3, #1
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	2b09      	cmp	r3, #9
 8000c5a:	ddec      	ble.n	8000c36 <MYRTOS_ReleaseMutex+0x32>
			}
		}

		Mutex->currentTask = Mutex->nextTask;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	621a      	str	r2, [r3, #32]
		Mutex->nextTask = NULL;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2200      	movs	r2, #0
 8000c68:	625a      	str	r2, [r3, #36]	; 0x24

		// Exiting suspend mode
		Mutex->currentTask->Task_State = Waiting;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6a1b      	ldr	r3, [r3, #32]
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		MYRTOS_OS_SVC_Set(SVC_ActivateTask);
 8000c74:	2000      	movs	r0, #0
 8000c76:	f7ff fec9 	bl	8000a0c <MYRTOS_OS_SVC_Set>
	}

	return errorState;
 8000c7a:	7afb      	ldrb	r3, [r7, #11]

}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000380 	.word	0x20000380

08000c88 <MYRTOS_START_OS>:




void MYRTOS_START_OS()
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	OS_Control.OS_Modes_ID = OS_Running;
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <MYRTOS_START_OS+0x50>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	// Set default "Current task == Idle task"
	OS_Control.CurrentTaskExecuted = &MYRTOS_IdleTask;
 8000c94:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <MYRTOS_START_OS+0x50>)
 8000c96:	4a11      	ldr	r2, [pc, #68]	; (8000cdc <MYRTOS_START_OS+0x54>)
 8000c98:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0

	// Activate Idle task
	MYRTOS_Activate_Task(&MYRTOS_IdleTask);
 8000c9c:	480f      	ldr	r0, [pc, #60]	; (8000cdc <MYRTOS_START_OS+0x54>)
 8000c9e:	f7ff fedb 	bl	8000a58 <MYRTOS_Activate_Task>


	// Start ticker
	Start_Ticker();
 8000ca2:	f7ff fae8 	bl	8000276 <Start_Ticker>

	OS_SET_PSP(OS_Control.CurrentTaskExecuted->Current_PSP);
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MYRTOS_START_OS+0x50>)
 8000ca8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f380 8809 	msr	PSP, r0

	// Switch thread mode from MSP to PSP
	OS_SWITCH_SP_to_PSP;
 8000cb4:	f3ef 8014 	mrs	r0, CONTROL
 8000cb8:	f040 0002 	orr.w	r0, r0, #2
 8000cbc:	f380 8814 	msr	CONTROL, r0
	OS_SWITCH_TO_UNPRIVILIGE;
 8000cc0:	f3ef 8314 	mrs	r3, CONTROL
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	f383 8814 	msr	CONTROL, r3
	MYRTOS_IdleTask.P_TaskEntry();
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <MYRTOS_START_OS+0x54>)
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	4798      	blx	r3
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200001d4 	.word	0x200001d4
 8000cdc:	200003bc 	.word	0x200003bc

08000ce0 <task1>:

Mutex_Config Mutex1,Mutex2;


void task1()
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	static int counter1 = 0;
	while(1){
		// Task1 Code
		Task1Indication ^= 1;
 8000ce4:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <task1+0x48>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	f083 0301 	eor.w	r3, r3, #1
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <task1+0x48>)
 8000cf0:	701a      	strb	r2, [r3, #0]
		counter1++;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <task1+0x4c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	4a0c      	ldr	r2, [pc, #48]	; (8000d2c <task1+0x4c>)
 8000cfa:	6013      	str	r3, [r2, #0]
		if(counter1 == 100){
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <task1+0x4c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b64      	cmp	r3, #100	; 0x64
 8000d02:	d106      	bne.n	8000d12 <task1+0x32>
			MYRTOS_AcquireMutex(&Mutex1, &Task1);
 8000d04:	490a      	ldr	r1, [pc, #40]	; (8000d30 <task1+0x50>)
 8000d06:	480b      	ldr	r0, [pc, #44]	; (8000d34 <task1+0x54>)
 8000d08:	f7ff ff0e 	bl	8000b28 <MYRTOS_AcquireMutex>
			MYRTOS_Activate_Task(&Task2);
 8000d0c:	480a      	ldr	r0, [pc, #40]	; (8000d38 <task1+0x58>)
 8000d0e:	f7ff fea3 	bl	8000a58 <MYRTOS_Activate_Task>
		}
		if(counter1 == 200)
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <task1+0x4c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2bc8      	cmp	r3, #200	; 0xc8
 8000d18:	d1e4      	bne.n	8000ce4 <task1+0x4>
		{
			counter1 = 0;
 8000d1a:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <task1+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
			MYRTOS_ReleaseMutex(&Mutex1);
 8000d20:	4804      	ldr	r0, [pc, #16]	; (8000d34 <task1+0x54>)
 8000d22:	f7ff ff6f 	bl	8000c04 <MYRTOS_ReleaseMutex>
		Task1Indication ^= 1;
 8000d26:	e7dd      	b.n	8000ce4 <task1+0x4>
 8000d28:	20000472 	.word	0x20000472
 8000d2c:	20000024 	.word	0x20000024
 8000d30:	20000474 	.word	0x20000474
 8000d34:	20000400 	.word	0x20000400
 8000d38:	20000568 	.word	0x20000568

08000d3c <task2>:
		}
	}
}

void task2()
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	static int counter1 = 0;
	while(1){
		// Task1 Code
		Task2Indication ^= 1;
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <task2+0x40>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	f083 0301 	eor.w	r3, r3, #1
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <task2+0x40>)
 8000d4c:	701a      	strb	r2, [r3, #0]
		counter1++;
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <task2+0x44>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	3301      	adds	r3, #1
 8000d54:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <task2+0x44>)
 8000d56:	6013      	str	r3, [r2, #0]
		if(counter1 == 100){
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <task2+0x44>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b64      	cmp	r3, #100	; 0x64
 8000d5e:	d102      	bne.n	8000d66 <task2+0x2a>
			MYRTOS_Activate_Task(&Task3);
 8000d60:	4808      	ldr	r0, [pc, #32]	; (8000d84 <task2+0x48>)
 8000d62:	f7ff fe79 	bl	8000a58 <MYRTOS_Activate_Task>
		}
		if(counter1 == 200)
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <task2+0x44>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2bc8      	cmp	r3, #200	; 0xc8
 8000d6c:	d1e8      	bne.n	8000d40 <task2+0x4>
		{
			MYRTOS_Terminate_Task(&Task2);
 8000d6e:	4806      	ldr	r0, [pc, #24]	; (8000d88 <task2+0x4c>)
 8000d70:	f7ff fe84 	bl	8000a7c <MYRTOS_Terminate_Task>
			counter1 = 0;
 8000d74:	4b02      	ldr	r3, [pc, #8]	; (8000d80 <task2+0x44>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
		Task2Indication ^= 1;
 8000d7a:	e7e1      	b.n	8000d40 <task2+0x4>
 8000d7c:	20000470 	.word	0x20000470
 8000d80:	20000028 	.word	0x20000028
 8000d84:	200004f4 	.word	0x200004f4
 8000d88:	20000568 	.word	0x20000568

08000d8c <task3>:
		}
	}
}

void task3()
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	static int counter1 = 0;
	while(1){
		// Task1 Code
		Task3Indication ^= 1;
 8000d90:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <task3+0x40>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	f083 0301 	eor.w	r3, r3, #1
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <task3+0x40>)
 8000d9c:	701a      	strb	r2, [r3, #0]
		counter1++;
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <task3+0x44>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <task3+0x44>)
 8000da6:	6013      	str	r3, [r2, #0]
		if(counter1 == 100){
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <task3+0x44>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b64      	cmp	r3, #100	; 0x64
 8000dae:	d102      	bne.n	8000db6 <task3+0x2a>
			MYRTOS_Activate_Task(&Task4);
 8000db0:	4808      	ldr	r0, [pc, #32]	; (8000dd4 <task3+0x48>)
 8000db2:	f7ff fe51 	bl	8000a58 <MYRTOS_Activate_Task>
		}
		if(counter1 == 200)
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <task3+0x44>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2bc8      	cmp	r3, #200	; 0xc8
 8000dbc:	d1e8      	bne.n	8000d90 <task3+0x4>
		{
			MYRTOS_Terminate_Task(&Task3);
 8000dbe:	4806      	ldr	r0, [pc, #24]	; (8000dd8 <task3+0x4c>)
 8000dc0:	f7ff fe5c 	bl	8000a7c <MYRTOS_Terminate_Task>
			counter1 = 0;
 8000dc4:	4b02      	ldr	r3, [pc, #8]	; (8000dd0 <task3+0x44>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
		Task3Indication ^= 1;
 8000dca:	e7e1      	b.n	8000d90 <task3+0x4>
 8000dcc:	20000564 	.word	0x20000564
 8000dd0:	2000002c 	.word	0x2000002c
 8000dd4:	20000430 	.word	0x20000430
 8000dd8:	200004f4 	.word	0x200004f4

08000ddc <task4>:
		}
	}
}

void task4()
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	static int counter1 = 0;
	while(1){
		// Task1 Code
		Task4Indication ^= 1;
 8000de0:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <task4+0x48>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	f083 0301 	eor.w	r3, r3, #1
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <task4+0x48>)
 8000dec:	701a      	strb	r2, [r3, #0]
		counter1++;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <task4+0x4c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	3301      	adds	r3, #1
 8000df4:	4a0c      	ldr	r2, [pc, #48]	; (8000e28 <task4+0x4c>)
 8000df6:	6013      	str	r3, [r2, #0]
		if(counter1 == 3)
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <task4+0x4c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b03      	cmp	r3, #3
 8000dfe:	d103      	bne.n	8000e08 <task4+0x2c>
		{
			MYRTOS_AcquireMutex(&Mutex1, &Task4);
 8000e00:	490a      	ldr	r1, [pc, #40]	; (8000e2c <task4+0x50>)
 8000e02:	480b      	ldr	r0, [pc, #44]	; (8000e30 <task4+0x54>)
 8000e04:	f7ff fe90 	bl	8000b28 <MYRTOS_AcquireMutex>
		}
		if(counter1 == 100){
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <task4+0x4c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b64      	cmp	r3, #100	; 0x64
 8000e0e:	d1e7      	bne.n	8000de0 <task4+0x4>
			MYRTOS_ReleaseMutex(&Mutex1);
 8000e10:	4807      	ldr	r0, [pc, #28]	; (8000e30 <task4+0x54>)
 8000e12:	f7ff fef7 	bl	8000c04 <MYRTOS_ReleaseMutex>
			MYRTOS_Terminate_Task(&Task4);
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <task4+0x50>)
 8000e18:	f7ff fe30 	bl	8000a7c <MYRTOS_Terminate_Task>
			counter1 = 0;
 8000e1c:	4b02      	ldr	r3, [pc, #8]	; (8000e28 <task4+0x4c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
		Task4Indication ^= 1;
 8000e22:	e7dd      	b.n	8000de0 <task4+0x4>
 8000e24:	200003fc 	.word	0x200003fc
 8000e28:	20000030 	.word	0x20000030
 8000e2c:	20000430 	.word	0x20000430
 8000e30:	20000400 	.word	0x20000400

08000e34 <task5>:
}



void task5()
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	static int counter1 = 0;
	while(1){
		// Task1 Code
		Task5Indication ^= 1;
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <task5+0x60>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	f083 0301 	eor.w	r3, r3, #1
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <task5+0x60>)
 8000e44:	701a      	strb	r2, [r3, #0]
		counter1++;
 8000e46:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <task5+0x64>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	4a12      	ldr	r2, [pc, #72]	; (8000e98 <task5+0x64>)
 8000e4e:	6013      	str	r3, [r2, #0]
		if(counter1 == 100){
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <task5+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b64      	cmp	r3, #100	; 0x64
 8000e56:	d10a      	bne.n	8000e6e <task5+0x3a>
			MYRTOS_AcquireMutex(&Mutex1, &Task5);
 8000e58:	4910      	ldr	r1, [pc, #64]	; (8000e9c <task5+0x68>)
 8000e5a:	4811      	ldr	r0, [pc, #68]	; (8000ea0 <task5+0x6c>)
 8000e5c:	f7ff fe64 	bl	8000b28 <MYRTOS_AcquireMutex>
			MYRTOS_Activate_Task(&Task6);
 8000e60:	4810      	ldr	r0, [pc, #64]	; (8000ea4 <task5+0x70>)
 8000e62:	f7ff fdf9 	bl	8000a58 <MYRTOS_Activate_Task>
			MYRTOS_AcquireMutex(&Mutex2, &Task5);
 8000e66:	490d      	ldr	r1, [pc, #52]	; (8000e9c <task5+0x68>)
 8000e68:	480f      	ldr	r0, [pc, #60]	; (8000ea8 <task5+0x74>)
 8000e6a:	f7ff fe5d 	bl	8000b28 <MYRTOS_AcquireMutex>

		}
		if(counter1 == 200)
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <task5+0x64>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2bc8      	cmp	r3, #200	; 0xc8
 8000e74:	d102      	bne.n	8000e7c <task5+0x48>
		{
			MYRTOS_ReleaseMutex(&Mutex1);
 8000e76:	480a      	ldr	r0, [pc, #40]	; (8000ea0 <task5+0x6c>)
 8000e78:	f7ff fec4 	bl	8000c04 <MYRTOS_ReleaseMutex>

		}
		if(counter1 == 300){
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <task5+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000e84:	d1d8      	bne.n	8000e38 <task5+0x4>
			MYRTOS_ReleaseMutex(&Mutex2);
 8000e86:	4808      	ldr	r0, [pc, #32]	; (8000ea8 <task5+0x74>)
 8000e88:	f7ff febc 	bl	8000c04 <MYRTOS_ReleaseMutex>
			counter1 = 0;
 8000e8c:	4b02      	ldr	r3, [pc, #8]	; (8000e98 <task5+0x64>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
		Task5Indication ^= 1;
 8000e92:	e7d1      	b.n	8000e38 <task5+0x4>
 8000e94:	20000471 	.word	0x20000471
 8000e98:	20000034 	.word	0x20000034
 8000e9c:	200004b4 	.word	0x200004b4
 8000ea0:	20000400 	.word	0x20000400
 8000ea4:	200005a8 	.word	0x200005a8
 8000ea8:	20000534 	.word	0x20000534

08000eac <task6>:
	}
}


void task6()
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	static int counter1 = 0;
	MYRTOS_AcquireMutex(&Mutex2, &Task6);
 8000eb0:	4916      	ldr	r1, [pc, #88]	; (8000f0c <task6+0x60>)
 8000eb2:	4817      	ldr	r0, [pc, #92]	; (8000f10 <task6+0x64>)
 8000eb4:	f7ff fe38 	bl	8000b28 <MYRTOS_AcquireMutex>
	while(1){
		// Task1 Code
		Task6Indication ^= 1;
 8000eb8:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <task6+0x68>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	f083 0301 	eor.w	r3, r3, #1
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <task6+0x68>)
 8000ec4:	701a      	strb	r2, [r3, #0]
		counter1++;
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <task6+0x6c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <task6+0x6c>)
 8000ece:	6013      	str	r3, [r2, #0]
		if(counter1 == 3)
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <task6+0x6c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d103      	bne.n	8000ee0 <task6+0x34>
		{
			MYRTOS_AcquireMutex(&Mutex1, &Task6);
 8000ed8:	490c      	ldr	r1, [pc, #48]	; (8000f0c <task6+0x60>)
 8000eda:	4810      	ldr	r0, [pc, #64]	; (8000f1c <task6+0x70>)
 8000edc:	f7ff fe24 	bl	8000b28 <MYRTOS_AcquireMutex>
		}
		if(counter1 == 100){
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <task6+0x6c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b64      	cmp	r3, #100	; 0x64
 8000ee6:	d105      	bne.n	8000ef4 <task6+0x48>
			MYRTOS_ReleaseMutex(&Mutex2);
 8000ee8:	4809      	ldr	r0, [pc, #36]	; (8000f10 <task6+0x64>)
 8000eea:	f7ff fe8b 	bl	8000c04 <MYRTOS_ReleaseMutex>
			MYRTOS_Terminate_Task(&Task6);
 8000eee:	4807      	ldr	r0, [pc, #28]	; (8000f0c <task6+0x60>)
 8000ef0:	f7ff fdc4 	bl	8000a7c <MYRTOS_Terminate_Task>
		}
		if(counter1 == 400)
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <task6+0x6c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000efc:	d1dc      	bne.n	8000eb8 <task6+0xc>
		{
			MYRTOS_ReleaseMutex(&Mutex2);
 8000efe:	4804      	ldr	r0, [pc, #16]	; (8000f10 <task6+0x64>)
 8000f00:	f7ff fe80 	bl	8000c04 <MYRTOS_ReleaseMutex>
			counter1 = 0;
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <task6+0x6c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
		Task6Indication ^= 1;
 8000f0a:	e7d5      	b.n	8000eb8 <task6+0xc>
 8000f0c:	200005a8 	.word	0x200005a8
 8000f10:	20000534 	.word	0x20000534
 8000f14:	20000473 	.word	0x20000473
 8000f18:	20000038 	.word	0x20000038
 8000f1c:	20000400 	.word	0x20000400

08000f20 <main>:
uint8_t payload[3] = {1,2,3};

uint8_t payload2[3] = {1,2,3};

int main(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
	MYRTOS_errorID Error = NO_ERROR;
 8000f26:	2300      	movs	r3, #0
 8000f28:	71fb      	strb	r3, [r7, #7]
	// HW_Init	(Initialize clockTree, ResetController)
	HW_Init();
 8000f2a:	f7ff f99b 	bl	8000264 <HW_Init>


	strcpy(Mutex1.MutexName,"Mutex T1,T4");
 8000f2e:	4b50      	ldr	r3, [pc, #320]	; (8001070 <main+0x150>)
 8000f30:	4a50      	ldr	r2, [pc, #320]	; (8001074 <main+0x154>)
 8000f32:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Mutex1.Payload_Size = 3;
 8000f38:	4b4d      	ldr	r3, [pc, #308]	; (8001070 <main+0x150>)
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	Mutex1.P_Payload = payload;
 8000f40:	4b4b      	ldr	r3, [pc, #300]	; (8001070 <main+0x150>)
 8000f42:	4a4d      	ldr	r2, [pc, #308]	; (8001078 <main+0x158>)
 8000f44:	629a      	str	r2, [r3, #40]	; 0x28





	if(MYRTOS_Init() != NO_ERROR)
 8000f46:	f7ff fca5 	bl	8000894 <MYRTOS_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d000      	beq.n	8000f52 <main+0x32>
		while(1);
 8000f50:	e7fe      	b.n	8000f50 <main+0x30>


	// Create tasks
	Task1.Stack_Size = 1024;   // 1kByte
 8000f52:	4b4a      	ldr	r3, [pc, #296]	; (800107c <main+0x15c>)
 8000f54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f58:	601a      	str	r2, [r3, #0]
	Task1.P_TaskEntry = task1;
 8000f5a:	4b48      	ldr	r3, [pc, #288]	; (800107c <main+0x15c>)
 8000f5c:	4a48      	ldr	r2, [pc, #288]	; (8001080 <main+0x160>)
 8000f5e:	609a      	str	r2, [r3, #8]
	Task1.Priority = 4;
 8000f60:	4b46      	ldr	r3, [pc, #280]	; (800107c <main+0x15c>)
 8000f62:	2204      	movs	r2, #4
 8000f64:	711a      	strb	r2, [r3, #4]
	strcpy(Task1.TaskName, "task_1");
 8000f66:	4b47      	ldr	r3, [pc, #284]	; (8001084 <main+0x164>)
 8000f68:	4a47      	ldr	r2, [pc, #284]	; (8001088 <main+0x168>)
 8000f6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f6e:	6018      	str	r0, [r3, #0]
 8000f70:	3304      	adds	r3, #4
 8000f72:	8019      	strh	r1, [r3, #0]
 8000f74:	3302      	adds	r3, #2
 8000f76:	0c0a      	lsrs	r2, r1, #16
 8000f78:	701a      	strb	r2, [r3, #0]

	Task2.Stack_Size = 1024;   // 1kByte
 8000f7a:	4b44      	ldr	r3, [pc, #272]	; (800108c <main+0x16c>)
 8000f7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f80:	601a      	str	r2, [r3, #0]
	Task2.P_TaskEntry = task2;
 8000f82:	4b42      	ldr	r3, [pc, #264]	; (800108c <main+0x16c>)
 8000f84:	4a42      	ldr	r2, [pc, #264]	; (8001090 <main+0x170>)
 8000f86:	609a      	str	r2, [r3, #8]
	Task2.Priority = 3;
 8000f88:	4b40      	ldr	r3, [pc, #256]	; (800108c <main+0x16c>)
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	711a      	strb	r2, [r3, #4]
	strcpy(Task2.TaskName, "task_2");
 8000f8e:	4b41      	ldr	r3, [pc, #260]	; (8001094 <main+0x174>)
 8000f90:	4a41      	ldr	r2, [pc, #260]	; (8001098 <main+0x178>)
 8000f92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f96:	6018      	str	r0, [r3, #0]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	8019      	strh	r1, [r3, #0]
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	0c0a      	lsrs	r2, r1, #16
 8000fa0:	701a      	strb	r2, [r3, #0]

	Task3.Stack_Size = 1024;   // 1kByte
 8000fa2:	4b3e      	ldr	r3, [pc, #248]	; (800109c <main+0x17c>)
 8000fa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fa8:	601a      	str	r2, [r3, #0]
	Task3.P_TaskEntry = task3;
 8000faa:	4b3c      	ldr	r3, [pc, #240]	; (800109c <main+0x17c>)
 8000fac:	4a3c      	ldr	r2, [pc, #240]	; (80010a0 <main+0x180>)
 8000fae:	609a      	str	r2, [r3, #8]
	Task3.Priority = 2;
 8000fb0:	4b3a      	ldr	r3, [pc, #232]	; (800109c <main+0x17c>)
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	711a      	strb	r2, [r3, #4]
	strcpy(Task3.TaskName, "task_3");
 8000fb6:	4b3b      	ldr	r3, [pc, #236]	; (80010a4 <main+0x184>)
 8000fb8:	4a3b      	ldr	r2, [pc, #236]	; (80010a8 <main+0x188>)
 8000fba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fbe:	6018      	str	r0, [r3, #0]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	8019      	strh	r1, [r3, #0]
 8000fc4:	3302      	adds	r3, #2
 8000fc6:	0c0a      	lsrs	r2, r1, #16
 8000fc8:	701a      	strb	r2, [r3, #0]

	Task4.Stack_Size = 1024;   // 0.5kByte
 8000fca:	4b38      	ldr	r3, [pc, #224]	; (80010ac <main+0x18c>)
 8000fcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fd0:	601a      	str	r2, [r3, #0]
	Task4.P_TaskEntry = task4;
 8000fd2:	4b36      	ldr	r3, [pc, #216]	; (80010ac <main+0x18c>)
 8000fd4:	4a36      	ldr	r2, [pc, #216]	; (80010b0 <main+0x190>)
 8000fd6:	609a      	str	r2, [r3, #8]
	Task4.Priority = 1;   // The highest priority among all tasks
 8000fd8:	4b34      	ldr	r3, [pc, #208]	; (80010ac <main+0x18c>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	711a      	strb	r2, [r3, #4]
	strcpy(Task4.TaskName, "task_4");
 8000fde:	4b35      	ldr	r3, [pc, #212]	; (80010b4 <main+0x194>)
 8000fe0:	4a35      	ldr	r2, [pc, #212]	; (80010b8 <main+0x198>)
 8000fe2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fe6:	6018      	str	r0, [r3, #0]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	8019      	strh	r1, [r3, #0]
 8000fec:	3302      	adds	r3, #2
 8000fee:	0c0a      	lsrs	r2, r1, #16
 8000ff0:	701a      	strb	r2, [r3, #0]
	// Task6 with a higher priority will ask for the mutex
	// But it is not released yet
	// Task5 will inherit Task6 Priority to prevent priority inversion condition


	Task5.Stack_Size = 1024;   // 1kByte
 8000ff2:	4b32      	ldr	r3, [pc, #200]	; (80010bc <main+0x19c>)
 8000ff4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ff8:	601a      	str	r2, [r3, #0]
	Task5.P_TaskEntry = task5;
 8000ffa:	4b30      	ldr	r3, [pc, #192]	; (80010bc <main+0x19c>)
 8000ffc:	4a30      	ldr	r2, [pc, #192]	; (80010c0 <main+0x1a0>)
 8000ffe:	609a      	str	r2, [r3, #8]
	Task5.Priority = 4;
 8001000:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <main+0x19c>)
 8001002:	2204      	movs	r2, #4
 8001004:	711a      	strb	r2, [r3, #4]
	strcpy(Task5.TaskName, "task_5");
 8001006:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <main+0x1a4>)
 8001008:	4a2f      	ldr	r2, [pc, #188]	; (80010c8 <main+0x1a8>)
 800100a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800100e:	6018      	str	r0, [r3, #0]
 8001010:	3304      	adds	r3, #4
 8001012:	8019      	strh	r1, [r3, #0]
 8001014:	3302      	adds	r3, #2
 8001016:	0c0a      	lsrs	r2, r1, #16
 8001018:	701a      	strb	r2, [r3, #0]


	Task6.Stack_Size = 1024;   // 1kByte
 800101a:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <main+0x1ac>)
 800101c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001020:	601a      	str	r2, [r3, #0]
	Task6.P_TaskEntry = task6;
 8001022:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <main+0x1ac>)
 8001024:	4a2a      	ldr	r2, [pc, #168]	; (80010d0 <main+0x1b0>)
 8001026:	609a      	str	r2, [r3, #8]
	Task6.Priority = 2;   // The highest priority among all tasks
 8001028:	4b28      	ldr	r3, [pc, #160]	; (80010cc <main+0x1ac>)
 800102a:	2202      	movs	r2, #2
 800102c:	711a      	strb	r2, [r3, #4]
	strcpy(Task6.TaskName, "task_6");
 800102e:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <main+0x1b4>)
 8001030:	4a29      	ldr	r2, [pc, #164]	; (80010d8 <main+0x1b8>)
 8001032:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001036:	6018      	str	r0, [r3, #0]
 8001038:	3304      	adds	r3, #4
 800103a:	8019      	strh	r1, [r3, #0]
 800103c:	3302      	adds	r3, #2
 800103e:	0c0a      	lsrs	r2, r1, #16
 8001040:	701a      	strb	r2, [r3, #0]
//	Error += MYRTOS_Create_Task(&Task1);
//	Error += MYRTOS_Create_Task(&Task2);
//	Error += MYRTOS_Create_Task(&Task3);
//	Error += MYRTOS_Create_Task(&Task4);

	Error += MYRTOS_Create_Task(&Task5);
 8001042:	481e      	ldr	r0, [pc, #120]	; (80010bc <main+0x19c>)
 8001044:	f7ff fca4 	bl	8000990 <MYRTOS_Create_Task>
 8001048:	4603      	mov	r3, r0
 800104a:	461a      	mov	r2, r3
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	4413      	add	r3, r2
 8001050:	71fb      	strb	r3, [r7, #7]
	Error += MYRTOS_Create_Task(&Task6);
 8001052:	481e      	ldr	r0, [pc, #120]	; (80010cc <main+0x1ac>)
 8001054:	f7ff fc9c 	bl	8000990 <MYRTOS_Create_Task>
 8001058:	4603      	mov	r3, r0
 800105a:	461a      	mov	r2, r3
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	4413      	add	r3, r2
 8001060:	71fb      	strb	r3, [r7, #7]

//	MYRTOS_Activate_Task(&Task1);
	//	MYRTOS_Activate_Task(&Task2);
	//	MYRTOS_Activate_Task(&Task3);

	MYRTOS_Activate_Task(&Task5);
 8001062:	4816      	ldr	r0, [pc, #88]	; (80010bc <main+0x19c>)
 8001064:	f7ff fcf8 	bl	8000a58 <MYRTOS_Activate_Task>
	//	MYRTOS_Activate_Task(&Task6);


	MYRTOS_START_OS();
 8001068:	f7ff fe0e 	bl	8000c88 <MYRTOS_START_OS>

	while(1)
 800106c:	e7fe      	b.n	800106c <main+0x14c>
 800106e:	bf00      	nop
 8001070:	20000400 	.word	0x20000400
 8001074:	080013bc 	.word	0x080013bc
 8001078:	20000000 	.word	0x20000000
 800107c:	20000474 	.word	0x20000474
 8001080:	08000ce1 	.word	0x08000ce1
 8001084:	2000048c 	.word	0x2000048c
 8001088:	080013c8 	.word	0x080013c8
 800108c:	20000568 	.word	0x20000568
 8001090:	08000d3d 	.word	0x08000d3d
 8001094:	20000580 	.word	0x20000580
 8001098:	080013d0 	.word	0x080013d0
 800109c:	200004f4 	.word	0x200004f4
 80010a0:	08000d8d 	.word	0x08000d8d
 80010a4:	2000050c 	.word	0x2000050c
 80010a8:	080013d8 	.word	0x080013d8
 80010ac:	20000430 	.word	0x20000430
 80010b0:	08000ddd 	.word	0x08000ddd
 80010b4:	20000448 	.word	0x20000448
 80010b8:	080013e0 	.word	0x080013e0
 80010bc:	200004b4 	.word	0x200004b4
 80010c0:	08000e35 	.word	0x08000e35
 80010c4:	200004cc 	.word	0x200004cc
 80010c8:	080013e8 	.word	0x080013e8
 80010cc:	200005a8 	.word	0x200005a8
 80010d0:	08000ead 	.word	0x08000ead
 80010d4:	200005c0 	.word	0x200005c0
 80010d8:	080013f0 	.word	0x080013f0

080010dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010dc:	480d      	ldr	r0, [pc, #52]	; (8001114 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010de:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e4:	480c      	ldr	r0, [pc, #48]	; (8001118 <LoopForever+0x6>)
  ldr r1, =_edata
 80010e6:	490d      	ldr	r1, [pc, #52]	; (800111c <LoopForever+0xa>)
  ldr r2, =_sidata
 80010e8:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <LoopForever+0xe>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ec:	e002      	b.n	80010f4 <LoopCopyDataInit>

080010ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f2:	3304      	adds	r3, #4

080010f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f8:	d3f9      	bcc.n	80010ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010fc:	4c0a      	ldr	r4, [pc, #40]	; (8001128 <LoopForever+0x16>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001100:	e001      	b.n	8001106 <LoopFillZerobss>

08001102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001104:	3204      	adds	r2, #4

08001106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001108:	d3fb      	bcc.n	8001102 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800110a:	f000 f921 	bl	8001350 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800110e:	f7ff ff07 	bl	8000f20 <main>

08001112 <LoopForever>:

LoopForever:
    b LoopForever
 8001112:	e7fe      	b.n	8001112 <LoopForever>
  ldr   r0, =_estack
 8001114:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800111c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001120:	08001400 	.word	0x08001400
  ldr r2, =_sbss
 8001124:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001128:	20000624 	.word	0x20000624

0800112c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800112c:	e7fe      	b.n	800112c <ADC1_2_IRQHandler>
	...

08001130 <EXTI0_IRQHandler>:
//														   //
// ---*----------*----------*---------*-----------*----------


void EXTI0_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0

	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<0;
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <EXTI0_IRQHandler+0x1c>)
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	4a04      	ldr	r2, [pc, #16]	; (800114c <EXTI0_IRQHandler+0x1c>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[0]();
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <EXTI0_IRQHandler+0x20>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4798      	blx	r3

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40010400 	.word	0x40010400
 8001150:	200005e8 	.word	0x200005e8

08001154 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<1;
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <EXTI1_IRQHandler+0x1c>)
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <EXTI1_IRQHandler+0x1c>)
 800115e:	f043 0302 	orr.w	r3, r3, #2
 8001162:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[1]();
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <EXTI1_IRQHandler+0x20>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	4798      	blx	r3
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40010400 	.word	0x40010400
 8001174:	200005e8 	.word	0x200005e8

08001178 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<2;
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <EXTI2_IRQHandler+0x1c>)
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <EXTI2_IRQHandler+0x1c>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[2]();
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <EXTI2_IRQHandler+0x20>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	4798      	blx	r3
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40010400 	.word	0x40010400
 8001198:	200005e8 	.word	0x200005e8

0800119c <EXTI3_IRQHandler>:



void EXTI3_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<3;
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <EXTI3_IRQHandler+0x1c>)
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <EXTI3_IRQHandler+0x1c>)
 80011a6:	f043 0308 	orr.w	r3, r3, #8
 80011aa:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[3]();
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <EXTI3_IRQHandler+0x20>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	4798      	blx	r3
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40010400 	.word	0x40010400
 80011bc:	200005e8 	.word	0x200005e8

080011c0 <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<4;
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <EXTI4_IRQHandler+0x1c>)
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <EXTI4_IRQHandler+0x1c>)
 80011ca:	f043 0310 	orr.w	r3, r3, #16
 80011ce:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[4]();
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <EXTI4_IRQHandler+0x20>)
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	4798      	blx	r3
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40010400 	.word	0x40010400
 80011e0:	200005e8 	.word	0x200005e8

080011e4 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<5){ EXTI->PR |= 1<<5;  GP_IRQ_CallBack[5]();}
 80011e8:	4b26      	ldr	r3, [pc, #152]	; (8001284 <EXTI9_5_IRQHandler+0xa0>)
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	f003 0320 	and.w	r3, r3, #32
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d008      	beq.n	8001206 <EXTI9_5_IRQHandler+0x22>
 80011f4:	4b23      	ldr	r3, [pc, #140]	; (8001284 <EXTI9_5_IRQHandler+0xa0>)
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	4a22      	ldr	r2, [pc, #136]	; (8001284 <EXTI9_5_IRQHandler+0xa0>)
 80011fa:	f043 0320 	orr.w	r3, r3, #32
 80011fe:	6153      	str	r3, [r2, #20]
 8001200:	4b21      	ldr	r3, [pc, #132]	; (8001288 <EXTI9_5_IRQHandler+0xa4>)
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	4798      	blx	r3
	if(EXTI->PR & 1<<6){ EXTI->PR |= 1<<6;  GP_IRQ_CallBack[6]();}
 8001206:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <EXTI9_5_IRQHandler+0xa0>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800120e:	2b00      	cmp	r3, #0
 8001210:	d008      	beq.n	8001224 <EXTI9_5_IRQHandler+0x40>
 8001212:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <EXTI9_5_IRQHandler+0xa0>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	4a1b      	ldr	r2, [pc, #108]	; (8001284 <EXTI9_5_IRQHandler+0xa0>)
 8001218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800121c:	6153      	str	r3, [r2, #20]
 800121e:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <EXTI9_5_IRQHandler+0xa4>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	4798      	blx	r3
	if(EXTI->PR & 1<<7){ EXTI->PR |= 1<<7;  GP_IRQ_CallBack[7]();}
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <EXTI9_5_IRQHandler+0xa0>)
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800122c:	2b00      	cmp	r3, #0
 800122e:	d008      	beq.n	8001242 <EXTI9_5_IRQHandler+0x5e>
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <EXTI9_5_IRQHandler+0xa0>)
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	4a13      	ldr	r2, [pc, #76]	; (8001284 <EXTI9_5_IRQHandler+0xa0>)
 8001236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800123a:	6153      	str	r3, [r2, #20]
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <EXTI9_5_IRQHandler+0xa4>)
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	4798      	blx	r3
	if(EXTI->PR & 1<<8){ EXTI->PR |= 1<<8;  GP_IRQ_CallBack[8]();}
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <EXTI9_5_IRQHandler+0xa0>)
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124a:	2b00      	cmp	r3, #0
 800124c:	d008      	beq.n	8001260 <EXTI9_5_IRQHandler+0x7c>
 800124e:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <EXTI9_5_IRQHandler+0xa0>)
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	4a0c      	ldr	r2, [pc, #48]	; (8001284 <EXTI9_5_IRQHandler+0xa0>)
 8001254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001258:	6153      	str	r3, [r2, #20]
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <EXTI9_5_IRQHandler+0xa4>)
 800125c:	6a1b      	ldr	r3, [r3, #32]
 800125e:	4798      	blx	r3
	if(EXTI->PR & 1<<9){ EXTI->PR |= 1<<9;  GP_IRQ_CallBack[9]();}
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <EXTI9_5_IRQHandler+0xa0>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001268:	2b00      	cmp	r3, #0
 800126a:	d008      	beq.n	800127e <EXTI9_5_IRQHandler+0x9a>
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <EXTI9_5_IRQHandler+0xa0>)
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	4a04      	ldr	r2, [pc, #16]	; (8001284 <EXTI9_5_IRQHandler+0xa0>)
 8001272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001276:	6153      	str	r3, [r2, #20]
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <EXTI9_5_IRQHandler+0xa4>)
 800127a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127c:	4798      	blx	r3
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40010400 	.word	0x40010400
 8001288:	200005e8 	.word	0x200005e8

0800128c <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<10){ EXTI->PR |= 1<<10;  GP_IRQ_CallBack[10]();}
 8001290:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <EXTI15_10_IRQHandler+0xbc>)
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001298:	2b00      	cmp	r3, #0
 800129a:	d008      	beq.n	80012ae <EXTI15_10_IRQHandler+0x22>
 800129c:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <EXTI15_10_IRQHandler+0xbc>)
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	4a29      	ldr	r2, [pc, #164]	; (8001348 <EXTI15_10_IRQHandler+0xbc>)
 80012a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012a6:	6153      	str	r3, [r2, #20]
 80012a8:	4b28      	ldr	r3, [pc, #160]	; (800134c <EXTI15_10_IRQHandler+0xc0>)
 80012aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ac:	4798      	blx	r3
	if(EXTI->PR & 1<<11){ EXTI->PR |= 1<<11;  GP_IRQ_CallBack[11]();}
 80012ae:	4b26      	ldr	r3, [pc, #152]	; (8001348 <EXTI15_10_IRQHandler+0xbc>)
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d008      	beq.n	80012cc <EXTI15_10_IRQHandler+0x40>
 80012ba:	4b23      	ldr	r3, [pc, #140]	; (8001348 <EXTI15_10_IRQHandler+0xbc>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	4a22      	ldr	r2, [pc, #136]	; (8001348 <EXTI15_10_IRQHandler+0xbc>)
 80012c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012c4:	6153      	str	r3, [r2, #20]
 80012c6:	4b21      	ldr	r3, [pc, #132]	; (800134c <EXTI15_10_IRQHandler+0xc0>)
 80012c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ca:	4798      	blx	r3
	if(EXTI->PR & 1<<12){ EXTI->PR |= 1<<12;  GP_IRQ_CallBack[12]();}
 80012cc:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <EXTI15_10_IRQHandler+0xbc>)
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d008      	beq.n	80012ea <EXTI15_10_IRQHandler+0x5e>
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <EXTI15_10_IRQHandler+0xbc>)
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	4a1a      	ldr	r2, [pc, #104]	; (8001348 <EXTI15_10_IRQHandler+0xbc>)
 80012de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012e2:	6153      	str	r3, [r2, #20]
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <EXTI15_10_IRQHandler+0xc0>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	4798      	blx	r3
	if(EXTI->PR & 1<<13){ EXTI->PR |= 1<<13;  GP_IRQ_CallBack[13]();}
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <EXTI15_10_IRQHandler+0xbc>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d008      	beq.n	8001308 <EXTI15_10_IRQHandler+0x7c>
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <EXTI15_10_IRQHandler+0xbc>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	4a13      	ldr	r2, [pc, #76]	; (8001348 <EXTI15_10_IRQHandler+0xbc>)
 80012fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001300:	6153      	str	r3, [r2, #20]
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <EXTI15_10_IRQHandler+0xc0>)
 8001304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001306:	4798      	blx	r3
	if(EXTI->PR & 1<<14){ EXTI->PR |= 1<<14;  GP_IRQ_CallBack[14]();}
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <EXTI15_10_IRQHandler+0xbc>)
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d008      	beq.n	8001326 <EXTI15_10_IRQHandler+0x9a>
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <EXTI15_10_IRQHandler+0xbc>)
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <EXTI15_10_IRQHandler+0xbc>)
 800131a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131e:	6153      	str	r3, [r2, #20]
 8001320:	4b0a      	ldr	r3, [pc, #40]	; (800134c <EXTI15_10_IRQHandler+0xc0>)
 8001322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001324:	4798      	blx	r3
	if(EXTI->PR & 1<<15){ EXTI->PR |= 1<<15;  GP_IRQ_CallBack[15]();}
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <EXTI15_10_IRQHandler+0xbc>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d008      	beq.n	8001344 <EXTI15_10_IRQHandler+0xb8>
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <EXTI15_10_IRQHandler+0xbc>)
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	4a04      	ldr	r2, [pc, #16]	; (8001348 <EXTI15_10_IRQHandler+0xbc>)
 8001338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800133c:	6153      	str	r3, [r2, #20]
 800133e:	4b03      	ldr	r3, [pc, #12]	; (800134c <EXTI15_10_IRQHandler+0xc0>)
 8001340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001342:	4798      	blx	r3
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40010400 	.word	0x40010400
 800134c:	200005e8 	.word	0x200005e8

08001350 <__libc_init_array>:
 8001350:	b570      	push	{r4, r5, r6, lr}
 8001352:	2500      	movs	r5, #0
 8001354:	4e0c      	ldr	r6, [pc, #48]	; (8001388 <__libc_init_array+0x38>)
 8001356:	4c0d      	ldr	r4, [pc, #52]	; (800138c <__libc_init_array+0x3c>)
 8001358:	1ba4      	subs	r4, r4, r6
 800135a:	10a4      	asrs	r4, r4, #2
 800135c:	42a5      	cmp	r5, r4
 800135e:	d109      	bne.n	8001374 <__libc_init_array+0x24>
 8001360:	f000 f81a 	bl	8001398 <_init>
 8001364:	2500      	movs	r5, #0
 8001366:	4e0a      	ldr	r6, [pc, #40]	; (8001390 <__libc_init_array+0x40>)
 8001368:	4c0a      	ldr	r4, [pc, #40]	; (8001394 <__libc_init_array+0x44>)
 800136a:	1ba4      	subs	r4, r4, r6
 800136c:	10a4      	asrs	r4, r4, #2
 800136e:	42a5      	cmp	r5, r4
 8001370:	d105      	bne.n	800137e <__libc_init_array+0x2e>
 8001372:	bd70      	pop	{r4, r5, r6, pc}
 8001374:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001378:	4798      	blx	r3
 800137a:	3501      	adds	r5, #1
 800137c:	e7ee      	b.n	800135c <__libc_init_array+0xc>
 800137e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001382:	4798      	blx	r3
 8001384:	3501      	adds	r5, #1
 8001386:	e7f2      	b.n	800136e <__libc_init_array+0x1e>
 8001388:	080013f8 	.word	0x080013f8
 800138c:	080013f8 	.word	0x080013f8
 8001390:	080013f8 	.word	0x080013f8
 8001394:	080013fc 	.word	0x080013fc

08001398 <_init>:
 8001398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800139a:	bf00      	nop
 800139c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800139e:	bc08      	pop	{r3}
 80013a0:	469e      	mov	lr, r3
 80013a2:	4770      	bx	lr

080013a4 <_fini>:
 80013a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013a6:	bf00      	nop
 80013a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013aa:	bc08      	pop	{r3}
 80013ac:	469e      	mov	lr, r3
 80013ae:	4770      	bx	lr
